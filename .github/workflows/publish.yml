name: Build and Publish

# NOTE: build logic is duplicated here and in test_build.yml

# Run on the main branch for commits only
on:
  push:
    branches:     
      - master

jobs:
  build_wheels:

    # only run if the most recent commit contains '[ci publish]'
    if: "contains(github.event.head_commit.message, '[ci publish]')"

    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14+ is apple silicon
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-latest]

    name: Build wheels ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Package source distribution
        # make sure this only happens on one of the runners, not repeated on all
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m pip install build
          python -m build --sdist

      - name: Run cibuildwheel
        uses: pypa/cibuildwheel@v2.23.2
        with:
          config-file: ".github/workflows/cibuildwheel_config.toml"

      - name: Copy source distribution into wheelhouse
        if: matrix.os == 'ubuntu-latest'
        run: mv dist/*.tar.gz wheelhouse/

      # Upload binaries to the github artifact store
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: |
            ./wheelhouse/*.whl 
            ./wheelhouse/*.tar.gz
          overwrite: true

  # Push the resulting binaries to pypi on a tag starting with 'v'
  upload_pypi:
    name: Upload release to PyPI

    # only run if the most recent commit contains '[ci publish]'
    if: "contains(github.event.head_commit.message, '[ci publish]')"

    needs: [build_wheels]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/polyscope
    permissions: # we authenticate via PyPI's 'trusted publisher' workflow, this permission is required
      id-token: write
    steps:
      - name: Download built wheels artifact # downloads from the jobs storage from the previous step
        uses: actions/download-artifact@v4.2.1
        with:
          # omitting the `name: ` field downloads all artifacts from this workflow
          path: dist

      - name: List downloaded files from artifact
        run: ls -lR dist

        # dist directory has subdirs from the different jobs, merge them into one directory and delete
        # the empty leftover dirs
      - name: Flatten directory
        run: find dist -mindepth 2 -type f -exec mv -t dist {} + && find dist -type d -empty -delete

      - name: List downloaded files from artifact after flatten
        run: ls -lR dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # with:
          # To test: repository_url: https://test.pypi.org/legacy/

