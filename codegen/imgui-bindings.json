{
  "functions": {
    "namespace": "ImGui",
    "functions": [
      {
        "name": "CreateContext",
        "return_type": "ImGuiContext*",
        "parameters": [
          {
            "name": "shared_font_atlas",
            "type": "ImFontAtlas*",
            "default": "NULL"
          }
        ],
        "description": "Creates a new ImGui context. You can optionally provide a shared font atlas."
      },
      {
        "name": "DestroyContext",
        "return_type": "void",
        "parameters": [
          {
            "name": "ctx",
            "type": "ImGuiContext*",
            "default": "NULL"
          }
        ],
        "description": "Destroys the specified ImGui context or the current context if none is provided."
      },
      {
        "name": "GetCurrentContext",
        "return_type": "ImGuiContext*",
        "parameters": [],
        "description": "Returns the current ImGui context."
      },
      {
        "name": "SetCurrentContext",
        "return_type": "void",
        "parameters": [
          {
            "name": "ctx",
            "type": "ImGuiContext*"
          }
        ],
        "description": "Sets the specified ImGui context as the current context."
      },
      {
        "name": "GetIO",
        "return_type": "ImGuiIO&",
        "parameters": [],
        "description": "Returns a reference to the ImGuiIO structure, which contains input/output data and configuration options."
      },
      {
        "name": "GetStyle",
        "return_type": "ImGuiStyle&",
        "parameters": [],
        "description": "Returns a reference to the ImGuiStyle structure, which contains style configurations like colors and sizes."
      },
      {
        "name": "NewFrame",
        "return_type": "void",
        "parameters": [],
        "description": "Starts a new ImGui frame. This must be called before any other ImGui commands in a frame."
      },
      {
        "name": "EndFrame",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the current ImGui frame. If you don't need to render data, you can call this without Render()."
      },
      {
        "name": "Render",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the ImGui frame and finalizes the draw data, which can then be rendered."
      },
      {
        "name": "GetDrawData",
        "return_type": "ImDrawData*",
        "parameters": [],
        "description": "Returns a pointer to the draw data after Render() has been called."
      },
      {
        "name": "ShowDemoWindow",
        "return_type": "void",
        "parameters": [
          {
            "name": "p_open",
            "type": "bool*",
            "default": "NULL"
          }
        ],
        "description": "Creates a demo window that demonstrates most ImGui features."
      },
      {
        "name": "ShowMetricsWindow",
        "return_type": "void",
        "parameters": [
          {
            "name": "p_open",
            "type": "bool*",
            "default": "NULL"
          }
        ],
        "description": "Creates a Metrics/Debugger window that displays internal state and other metrics."
      },
      {
        "name": "ShowStyleEditor",
        "return_type": "void",
        "parameters": [
          {
            "name": "ref",
            "type": "ImGuiStyle*",
            "default": "NULL"
          }
        ],
        "description": "Opens the style editor, which allows you to customize the style parameters."
      },
      {
        "name": "ShowUserGuide",
        "return_type": "void",
        "parameters": [],
        "description": "Shows a user guide window with basic help and information about ImGui usage."
      },
      {
        "name": "GetVersion",
        "return_type": "const char*",
        "parameters": [],
        "description": "Returns the ImGui version as a string."
      },
      {
        "name": "StyleColorsDark",
        "return_type": "void",
        "parameters": [
          {
            "name": "dst",
            "type": "ImGuiStyle*",
            "default": "NULL"
          }
        ],
        "description": "Applies the default dark style to the current context."
      },
      {
        "name": "StyleColorsLight",
        "return_type": "void",
        "parameters": [
          {
            "name": "dst",
            "type": "ImGuiStyle*",
            "default": "NULL"
          }
        ],
        "description": "Applies the default light style to the current context."
      },
      {
        "name": "StyleColorsClassic",
        "return_type": "void",
        "parameters": [
          {
            "name": "dst",
            "type": "ImGuiStyle*",
            "default": "NULL"
          }
        ],
        "description": "Applies the classic ImGui style to the current context."
      },
      {
        "name": "Begin",
        "return_type": "bool",
        "parameters": [
          {
            "name": "name",
            "type": "const char*"
          },
          {
            "name": "p_open",
            "type": "bool*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiWindowFlags",
            "default": "0"
          }
        ],
        "description": "Begins a new window. Returns true if the window is visible."
      },
      {
        "name": "End",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the current window."
      },
      {
        "name": "BeginChild",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "size",
            "type": "const ImVec2&",
            "default": "ImVec2(0, 0)"
          },
          {
            "name": "child_flags",
            "type": "ImGuiChildFlags",
            "default": "0"
          },
          {
            "name": "window_flags",
            "type": "ImGuiWindowFlags",
            "default": "0"
          }
        ],
        "description": "Begins a child window, which is a self-contained scrolling/clipping region."
      },
      {
        "name": "EndChild",
        "return_type": "void",
        "parameters": [],
        "description": "Ends a child window."
      },
      {
        "name": "IsWindowAppearing",
        "return_type": "bool",
        "parameters": [],
        "description": "Returns true if the current window is appearing."
      },
      {
        "name": "IsWindowCollapsed",
        "return_type": "bool",
        "parameters": [],
        "description": "Returns true if the current window is collapsed."
      },
      {
        "name": "IsWindowFocused",
        "return_type": "bool",
        "parameters": [
          {
            "name": "flags",
            "type": "ImGuiFocusedFlags",
            "default": "0"
          }
        ],
        "description": "Returns true if the current window is focused, or its root/child depending on flags."
      },
      {
        "name": "IsWindowHovered",
        "return_type": "bool",
        "parameters": [
          {
            "name": "flags",
            "type": "ImGuiHoveredFlags",
            "default": "0"
          }
        ],
        "description": "Returns true if the current window is hovered and hoverable."
      },
      {
        "name": "GetWindowDrawList",
        "return_type": "ImDrawList*",
        "parameters": [],
        "description": "Returns the draw list associated with the current window."
      },
      {
        "name": "GetWindowPos",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the current window position in screen space."
      },
      {
        "name": "GetWindowSize",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the current window size."
      },
      {
        "name": "SetNextWindowPos",
        "return_type": "void",
        "parameters": [
          {
            "name": "pos",
            "type": "const ImVec2&"
          },
          {
            "name": "cond",
            "type": "ImGuiCond",
            "default": "0"
          },
          {
            "name": "pivot",
            "type": "const ImVec2&",
            "default": "ImVec2(0, 0)"
          }
        ],
        "description": "Sets the position for the next window. Call before Begin()."
      },
      {
        "name": "SetNextWindowSize",
        "return_type": "void",
        "parameters": [
          {
            "name": "size",
            "type": "const ImVec2&"
          },
          {
            "name": "cond",
            "type": "ImGuiCond",
            "default": "0"
          }
        ],
        "description": "Sets the size for the next window. Call before Begin()."
      },
      {
        "name": "SetNextWindowSizeConstraints",
        "return_type": "void",
        "parameters": [
          {
            "name": "size_min",
            "type": "const ImVec2&"
          },
          {
            "name": "size_max",
            "type": "const ImVec2&"
          },
          {
            "name": "custom_callback",
            "type": "ImGuiSizeCallback",
            "default": "NULL"
          },
          {
            "name": "custom_callback_data",
            "type": "void*",
            "default": "NULL"
          }
        ],
        "description": "Sets the size limits for the next window. Use 0.0f or FLT_MAX if no limits are desired. Custom callbacks can be used for complex constraints."
      },
      {
        "name": "SetNextWindowContentSize",
        "return_type": "void",
        "parameters": [
          {
            "name": "size",
            "type": "const ImVec2&"
          }
        ],
        "description": "Sets the content size for the next window (scrollable client area). This does not include window decorations like the title bar or menu bar."
      },
      {
        "name": "SetNextWindowCollapsed",
        "return_type": "void",
        "parameters": [
          {
            "name": "collapsed",
            "type": "bool"
          },
          {
            "name": "cond",
            "type": "ImGuiCond",
            "default": "0"
          }
        ],
        "description": "Sets the collapsed state for the next window. This should be called before Begin()."
      },
      {
        "name": "SetNextWindowFocus",
        "return_type": "void",
        "parameters": [],
        "description": "Sets the next window to be focused and top-most. This should be called before Begin()."
      },
      {
        "name": "SetNextWindowScroll",
        "return_type": "void",
        "parameters": [
          {
            "name": "scroll",
            "type": "const ImVec2&"
          }
        ],
        "description": "Sets the scrolling position for the next window. Use < 0.0f for an axis to leave it unchanged."
      },
      {
        "name": "SetNextWindowBgAlpha",
        "return_type": "void",
        "parameters": [
          {
            "name": "alpha",
            "type": "float"
          }
        ],
        "description": "Sets the background color alpha for the next window. This can be used to override the alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg."
      },
      {
        "name": "SetWindowPos",
        "return_type": "void",
        "parameters": [
          {
            "name": "pos",
            "type": "const ImVec2&"
          },
          {
            "name": "cond",
            "type": "ImGuiCond",
            "default": "0"
          }
        ],
        "description": "(Not recommended) Sets the current window position. This should be called within a Begin()/End() block. Prefer using SetNextWindowPos()."
      },
      {
        "name": "SetWindowSize",
        "return_type": "void",
        "parameters": [
          {
            "name": "size",
            "type": "const ImVec2&"
          },
          {
            "name": "cond",
            "type": "ImGuiCond",
            "default": "0"
          }
        ],
        "description": "(Not recommended) Sets the current window size. This should be called within a Begin()/End() block. Prefer using SetNextWindowSize()."
      },
      {
        "name": "SetWindowCollapsed",
        "return_type": "void",
        "parameters": [
          {
            "name": "collapsed",
            "type": "bool"
          },
          {
            "name": "cond",
            "type": "ImGuiCond",
            "default": "0"
          }
        ],
        "description": "(Not recommended) Sets the current window collapsed state. Prefer using SetNextWindowCollapsed()."
      },
      {
        "name": "SetWindowFocus",
        "return_type": "void",
        "parameters": [],
        "description": "(Not recommended) Sets the current window to be focused and top-most. Prefer using SetNextWindowFocus()."
      },
      {
        "name": "SetWindowFontScale",
        "return_type": "void",
        "parameters": [
          {
            "name": "scale",
            "type": "float"
          }
        ],
        "description": "[OBSOLETE] Sets the font scale for the current window. It is recommended to adjust IO.FontGlobalScale or reload the font instead."
      },
      {
        "name": "SetWindowPos",
        "return_type": "void",
        "parameters": [
          {
            "name": "name",
            "type": "const char*"
          },
          {
            "name": "pos",
            "type": "const ImVec2&"
          },
          {
            "name": "cond",
            "type": "ImGuiCond",
            "default": "0"
          }
        ],
        "description": "Sets the position of the window specified by name."
      },
      {
        "name": "SetWindowSize",
        "return_type": "void",
        "parameters": [
          {
            "name": "name",
            "type": "const char*"
          },
          {
            "name": "size",
            "type": "const ImVec2&"
          },
          {
            "name": "cond",
            "type": "ImGuiCond",
            "default": "0"
          }
        ],
        "description": "Sets the size of the window specified by name. Set an axis to 0.0f to force an auto-fit."
      },
      {
        "name": "SetWindowCollapsed",
        "return_type": "void",
        "parameters": [
          {
            "name": "name",
            "type": "const char*"
          },
          {
            "name": "collapsed",
            "type": "bool"
          },
          {
            "name": "cond",
            "type": "ImGuiCond",
            "default": "0"
          }
        ],
        "description": "Sets the collapsed state of the window specified by name."
      },
      {
        "name": "SetWindowFocus",
        "return_type": "void",
        "parameters": [
          {
            "name": "name",
            "type": "const char*"
          }
        ],
        "description": "Sets the window specified by name to be focused and top-most."
      },
      {
        "name": "GetScrollX",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the horizontal scrolling amount, ranging from 0 to GetScrollMaxX()."
      },
      {
        "name": "GetScrollY",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the vertical scrolling amount, ranging from 0 to GetScrollMaxY()."
      },
      {
        "name": "SetScrollX",
        "return_type": "void",
        "parameters": [
          {
            "name": "scroll_x",
            "type": "float"
          }
        ],
        "description": "Sets the horizontal scrolling amount, ranging from 0 to GetScrollMaxX()."
      },
      {
        "name": "SetScrollY",
        "return_type": "void",
        "parameters": [
          {
            "name": "scroll_y",
            "type": "float"
          }
        ],
        "description": "Sets the vertical scrolling amount, ranging from 0 to GetScrollMaxY()."
      },
      {
        "name": "GetScrollMaxX",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the maximum horizontal scrolling amount, calculated as ContentSize.x - WindowSize.x - DecorationsSize.x."
      },
      {
        "name": "GetScrollMaxY",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the maximum vertical scrolling amount, calculated as ContentSize.y - WindowSize.y - DecorationsSize.y."
      },
      {
        "name": "SetScrollHereX",
        "return_type": "void",
        "parameters": [
          {
            "name": "center_x_ratio",
            "type": "float",
            "default": "0.5f"
          }
        ],
        "description": "Adjusts the horizontal scrolling amount to make the current cursor position visible. center_x_ratio=0.0 aligns left, 0.5 centers, 1.0 aligns right."
      },
      {
        "name": "SetScrollHereY",
        "return_type": "void",
        "parameters": [
          {
            "name": "center_y_ratio",
            "type": "float",
            "default": "0.5f"
          }
        ],
        "description": "Adjusts the vertical scrolling amount to make the current cursor position visible. center_y_ratio=0.0 aligns top, 0.5 centers, 1.0 aligns bottom."
      },
      {
        "name": "SetScrollFromPosX",
        "return_type": "void",
        "parameters": [
          {
            "name": "local_x",
            "type": "float"
          },
          {
            "name": "center_x_ratio",
            "type": "float",
            "default": "0.5f"
          }
        ],
        "description": "Adjusts the horizontal scrolling amount to make the specified position visible. Use GetCursorStartPos() + offset to compute a valid position."
      },
      {
        "name": "SetScrollFromPosY",
        "return_type": "void",
        "parameters": [
          {
            "name": "local_y",
            "type": "float"
          },
          {
            "name": "center_y_ratio",
            "type": "float",
            "default": "0.5f"
          }
        ],
        "description": "Adjusts the vertical scrolling amount to make the specified position visible. Use GetCursorStartPos() + offset to compute a valid position."
      },
      {
        "name": "PushFont",
        "return_type": "void",
        "parameters": [
          {
            "name": "font",
            "type": "ImFont*"
          }
        ],
        "description": "Pushes the specified font onto the font stack. Use NULL to push the default font."
      },
      {
        "name": "PopFont",
        "return_type": "void",
        "parameters": [],
        "description": "Pops the last font pushed onto the font stack."
      },
      {
        "name": "PushStyleColor",
        "return_type": "void",
        "parameters": [
          {
            "name": "idx",
            "type": "ImGuiCol"
          },
          {
            "name": "col",
            "type": "ImU32"
          }
        ],
        "description": "Pushes a style color onto the style color stack, modifying the color specified by idx."
      },
      {
        "name": "PushStyleColor",
        "return_type": "void",
        "parameters": [
          {
            "name": "idx",
            "type": "ImGuiCol"
          },
          {
            "name": "col",
            "type": "const ImVec4&"
          }
        ],
        "description": "Pushes a style color onto the style color stack, modifying the color specified by idx."
      },
      {
        "name": "PopStyleColor",
        "return_type": "void",
        "parameters": [
          {
            "name": "count",
            "type": "int",
            "default": "1"
          }
        ],
        "description": "Pops one or more style colors from the style color stack."
      },
      {
        "name": "PushStyleVar",
        "return_type": "void",
        "parameters": [
          {
            "name": "idx",
            "type": "ImGuiStyleVar"
          },
          {
            "name": "val",
            "type": "float"
          }
        ],
        "description": "Pushes a style variable onto the style variable stack, modifying the float variable specified by idx."
      },
      {
        "name": "PushStyleVar",
        "return_type": "void",
        "parameters": [
          {
            "name": "idx",
            "type": "ImGuiStyleVar"
          },
          {
            "name": "val",
            "type": "const ImVec2&"
          }
        ],
        "description": "Pushes a style variable onto the style variable stack, modifying the ImVec2 variable specified by idx."
      },
      {
        "name": "PopStyleVar",
        "return_type": "void",
        "parameters": [
          {
            "name": "count",
            "type": "int",
            "default": "1"
          }
        ],
        "description": "Pops one or more style variables from the style variable stack."
      },
      {
        "name": "PushItemFlag",
        "return_type": "void",
        "parameters": [
          {
            "name": "option",
            "type": "ImGuiItemFlags"
          },
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "description": "Pushes an item flag onto the item flag stack, modifying the specified option."
      },
      {
        "name": "PopItemFlag",
        "return_type": "void",
        "parameters": [],
        "description": "Pops the last item flag pushed onto the item flag stack."
      },
      {
        "name": "PushItemWidth",
        "return_type": "void",
        "parameters": [
          {
            "name": "item_width",
            "type": "float"
          }
        ],
        "description": "Pushes the width of items for common large 'item+label' widgets. >0.0f: width in pixels, <0.0f aligns the width to the right of the window."
      },
      {
        "name": "PopItemWidth",
        "return_type": "void",
        "parameters": [],
        "description": "Pops the last item width pushed onto the item width stack."
      },
      {
        "name": "SetNextItemWidth",
        "return_type": "void",
        "parameters": [
          {
            "name": "item_width",
            "type": "float"
          }
        ],
        "description": "Sets the width of the next common large 'item+label' widget. >0.0f: width in pixels, <0.0f aligns the width to the right of the window."
      },
      {
        "name": "CalcItemWidth",
        "return_type": "float",
        "parameters": [],
        "description": "Calculates the width of the item given the pushed settings and current cursor position."
      },
      {
        "name": "PushTextWrapPos",
        "return_type": "void",
        "parameters": [
          {
            "name": "wrap_local_pos_x",
            "type": "float",
            "default": "0.0f"
          }
        ],
        "description": "Pushes the word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window; > 0.0f: wrap at 'wrap_pos_x' position in window local space."
      },
      {
        "name": "PopTextWrapPos",
        "return_type": "void",
        "parameters": [],
        "description": "Pops the last word-wrapping position pushed onto the stack."
      },
      {
        "name": "GetFont",
        "return_type": "ImFont*",
        "parameters": [],
        "description": "Returns the current font being used."
      },
      {
        "name": "GetFontSize",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the current font size in pixels, with the current scale applied."
      },
      {
        "name": "GetFontTexUvWhitePixel",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the UV coordinate for a white pixel, useful for drawing custom shapes via the ImDrawList API."
      },
      {
        "name": "GetColorU32",
        "return_type": "ImU32",
        "parameters": [
          {
            "name": "idx",
            "type": "ImGuiCol"
          },
          {
            "name": "alpha_mul",
            "type": "float",
            "default": "1.0f"
          }
        ],
        "description": "Retrieves the style color specified by idx, with the style alpha applied and an optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList."
      },
      {
        "name": "GetColorU32",
        "return_type": "ImU32",
        "parameters": [
          {
            "name": "col",
            "type": "const ImVec4&"
          }
        ],
        "description": "Retrieves the given color with the style alpha applied, packed as a 32-bit value suitable for ImDrawList."
      },
      {
        "name": "GetColorU32",
        "return_type": "ImU32",
        "parameters": [
          {
            "name": "col",
            "type": "ImU32"
          },
          {
            "name": "alpha_mul",
            "type": "float",
            "default": "1.0f"
          }
        ],
        "description": "Retrieves the given color with the style alpha applied, packed as a 32-bit value suitable for ImDrawList."
      },
      {
        "name": "GetStyleColorVec4",
        "return_type": "const ImVec4&",
        "parameters": [
          {
            "name": "idx",
            "type": "ImGuiCol"
          }
        ],
        "description": "Retrieves the style color as stored in the ImGuiStyle structure. Use this to feed back into PushStyleColor(), otherwise use GetColorU32() to get the style color with style alpha baked in."
      },
      {
        "name": "GetCursorScreenPos",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the current cursor position in absolute screen coordinates. This is typically the best function to use for getting cursor position."
      },
      {
        "name": "SetCursorScreenPos",
        "return_type": "void",
        "parameters": [
          {
            "name": "pos",
            "type": "const ImVec2&"
          }
        ],
        "description": "Sets the cursor position in absolute screen coordinates."
      },
      {
        "name": "GetContentRegionAvail",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the available space from the current position. This is typically the best function to use for getting the available content region."
      },
      {
        "name": "GetCursorPos",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the current cursor position in window-local coordinates."
      },
      {
        "name": "GetCursorPosX",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the X coordinate of the current cursor position in window-local coordinates."
      },
      {
        "name": "GetCursorPosY",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the Y coordinate of the current cursor position in window-local coordinates."
      },
      {
        "name": "SetCursorPos",
        "return_type": "void",
        "parameters": [
          {
            "name": "local_pos",
            "type": "const ImVec2&"
          }
        ],
        "description": "Sets the cursor position in window-local coordinates."
      },
      {
        "name": "SetCursorPosX",
        "return_type": "void",
        "parameters": [
          {
            "name": "local_x",
            "type": "float"
          }
        ],
        "description": "Sets the X coordinate of the cursor position in window-local coordinates."
      },
      {
        "name": "SetCursorPosY",
        "return_type": "void",
        "parameters": [
          {
            "name": "local_y",
            "type": "float"
          }
        ],
        "description": "Sets the Y coordinate of the cursor position in window-local coordinates."
      },
      {
        "name": "GetCursorStartPos",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the initial cursor position in window-local coordinates. Call GetCursorScreenPos() after Begin() to get the absolute coordinates version."
      },
      {
        "name": "Separator",
        "return_type": "void",
        "parameters": [],
        "description": "Creates a separator, generally horizontal. Inside a menu bar or in horizontal layout mode, this becomes a vertical separator."
      },
      {
        "name": "SameLine",
        "return_type": "void",
        "parameters": [
          {
            "name": "offset_from_start_x",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "spacing",
            "type": "float",
            "default": "-1.0f"
          }
        ],
        "description": "Lays out widgets horizontally by undoing the last carriage return. The X position is given in window coordinates."
      },
      {
        "name": "NewLine",
        "return_type": "void",
        "parameters": [],
        "description": "Forces a new line when in a horizontal-layout context or undoes a SameLine()."
      },
      {
        "name": "Spacing",
        "return_type": "void",
        "parameters": [],
        "description": "Adds vertical spacing."
      },
      {
        "name": "Dummy",
        "return_type": "void",
        "parameters": [
          {
            "name": "size",
            "type": "const ImVec2&"
          }
        ],
        "description": "Adds a dummy item of the given size. Unlike InvisibleButton(), Dummy() won't take mouse clicks or be navigable."
      },
      {
        "name": "Indent",
        "return_type": "void",
        "parameters": [
          {
            "name": "indent_w",
            "type": "float",
            "default": "0.0f"
          }
        ],
        "description": "Moves the content position to the right by indent_w, or by style.IndentSpacing if indent_w <= 0."
      },
      {
        "name": "Unindent",
        "return_type": "void",
        "parameters": [
          {
            "name": "indent_w",
            "type": "float",
            "default": "0.0f"
          }
        ],
        "description": "Moves the content position back to the left by indent_w, or by style.IndentSpacing if indent_w <= 0."
      },
      {
        "name": "BeginGroup",
        "return_type": "void",
        "parameters": [],
        "description": "Locks the horizontal starting position for a group of items."
      },
      {
        "name": "EndGroup",
        "return_type": "void",
        "parameters": [],
        "description": "Unlocks the horizontal starting position for a group of items and captures the whole group bounding box as one 'item.'"
      },
      {
        "name": "AlignTextToFramePadding",
        "return_type": "void",
        "parameters": [],
        "description": "Vertically aligns the upcoming text baseline to FramePadding.y, so that it aligns properly with regularly framed items."
      },
      {
        "name": "GetTextLineHeight",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the height of a text line, approximately equal to FontSize."
      },
      {
        "name": "GetTextLineHeightWithSpacing",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the height of a text line, including spacing. Approximately equal to FontSize + style.ItemSpacing.y."
      },
      {
        "name": "GetFrameHeight",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the height of a frame, approximately equal to FontSize + style.FramePadding.y * 2."
      },
      {
        "name": "GetFrameHeightWithSpacing",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the height of a frame, including spacing. Approximately equal to FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y."
      },
      {
        "name": "PushID",
        "return_type": "void",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          }
        ],
        "description": "Pushes a string into the ID stack (will hash the string)."
      },
      {
        "name": "PushID",
        "return_type": "void",
        "parameters": [
          {
            "name": "str_id_begin",
            "type": "const char*"
          },
          {
            "name": "str_id_end",
            "type": "const char*"
          }
        ],
        "description": "Pushes a substring into the ID stack (will hash the string)."
      },
      {
        "name": "PushID",
        "return_type": "void",
        "parameters": [
          {
            "name": "ptr_id",
            "type": "const void*"
          }
        ],
        "description": "Pushes a pointer into the ID stack (will hash the pointer)."
      },
      {
        "name": "PushID",
        "return_type": "void",
        "parameters": [
          {
            "name": "int_id",
            "type": "int"
          }
        ],
        "description": "Pushes an integer into the ID stack (will hash the integer)."
      },
      {
        "name": "PopID",
        "return_type": "void",
        "parameters": [],
        "description": "Pops from the ID stack."
      },
      {
        "name": "GetID",
        "return_type": "ImGuiID",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          }
        ],
        "description": "Calculates a unique ID by hashing the entire ID stack with the given parameter. Useful for querying ImGuiStorage."
      },
      {
        "name": "GetID",
        "return_type": "ImGuiID",
        "parameters": [
          {
            "name": "str_id_begin",
            "type": "const char*"
          },
          {
            "name": "str_id_end",
            "type": "const char*"
          }
        ],
        "description": "Calculates a unique ID by hashing the entire ID stack with the given substring."
      },
      {
        "name": "GetID",
        "return_type": "ImGuiID",
        "parameters": [
          {
            "name": "ptr_id",
            "type": "const void*"
          }
        ],
        "description": "Calculates a unique ID by hashing the entire ID stack with the given pointer."
      },
      {
        "name": "GetID",
        "return_type": "ImGuiID",
        "parameters": [
          {
            "name": "int_id",
            "type": "int"
          }
        ],
        "description": "Calculates a unique ID by hashing the entire ID stack with the given integer."
      },
      {
        "name": "TextUnformatted",
        "return_type": "void",
        "parameters": [
          {
            "name": "text",
            "type": "const char*"
          },
          {
            "name": "text_end",
            "type": "const char*",
            "default": "NULL"
          }
        ],
        "description": "Displays raw text without formatting. This is roughly equivalent to Text('%s', text) but faster and with no memory copy, buffer size limits, or null termination requirement if text_end is specified."
      },
      {
        "name": "Text",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "...",
            "type": "..."
          }
        ],
        "description": "Displays formatted text."
      },
      {
        "name": "TextV",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Displays formatted text using a va_list."
      },
      {
        "name": "TextColored",
        "return_type": "void",
        "parameters": [
          {
            "name": "col",
            "type": "const ImVec4&"
          },
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "...",
            "type": "..."
          }
        ],
        "description": "Displays formatted text with the specified color."
      },
      {
        "name": "TextColoredV",
        "return_type": "void",
        "parameters": [
          {
            "name": "col",
            "type": "const ImVec4&"
          },
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Displays formatted text with the specified color using a va_list."
      },
      {
        "name": "TextDisabled",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "...",
            "type": "..."
          }
        ],
        "description": "Displays formatted text in a disabled style (gray color)."
      },
      {
        "name": "TextDisabledV",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Displays formatted text in a disabled style (gray color) using a va_list."
      },
      {
        "name": "TextWrapped",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "...",
            "type": "..."
          }
        ],
        "description": "Displays formatted text with word-wrapping enabled. The text will wrap at the end of the window or column by default."
      },
      {
        "name": "TextWrappedV",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Displays formatted text with word-wrapping enabled using a va_list."
      },
      {
        "name": "LabelText",
        "return_type": "void",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "...",
            "type": "..."
          }
        ],
        "description": "Displays a label and value aligned in the same way as value+label widgets."
      },
      {
        "name": "LabelTextV",
        "return_type": "void",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Displays a label and value aligned in the same way as value+label widgets using a va_list."
      },
      {
        "name": "BulletText",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "...",
            "type": "..."
          }
        ],
        "description": "Displays a bullet followed by formatted text."
      },
      {
        "name": "BulletTextV",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Displays a bullet followed by formatted text using a va_list."
      },
      {
        "name": "SeparatorText",
        "return_type": "void",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          }
        ],
        "description": "Displays formatted text with a horizontal line separator."
      },
      {
        "name": "Button",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "size",
            "type": "const ImVec2&",
            "default": "ImVec2(0, 0)"
          }
        ],
        "description": "Creates a button with the specified label and size. Returns true when the button is pressed."
      },
      {
        "name": "SmallButton",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          }
        ],
        "description": "Creates a small button with the specified label. Useful for embedding within text."
      },
      {
        "name": "InvisibleButton",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "size",
            "type": "const ImVec2&"
          },
          {
            "name": "flags",
            "type": "ImGuiButtonFlags",
            "default": "0"
          }
        ],
        "description": "Creates an invisible button with flexible behavior, frequently used to build custom behaviors using the public API (along with IsItemActive, IsItemHovered, etc.)."
      },
      {
        "name": "ArrowButton",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "dir",
            "type": "ImGuiDir"
          }
        ],
        "description": "Creates a square button with an arrow shape pointing in the specified direction."
      },
      {
        "name": "Checkbox",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "bool*"
          }
        ],
        "description": "Creates a checkbox with the specified label and boolean value. Returns true when the checkbox is clicked."
      },
      {
        "name": "CheckboxFlags",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "int*"
          },
          {
            "name": "flags_value",
            "type": "int"
          }
        ],
        "description": "Creates a checkbox that toggles specific flags within an integer."
      },
      {
        "name": "CheckboxFlags",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "unsigned int*"
          },
          {
            "name": "flags_value",
            "type": "unsigned int"
          }
        ],
        "description": "Creates a checkbox that toggles specific flags within an unsigned integer."
      },
      {
        "name": "RadioButton",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "active",
            "type": "bool"
          }
        ],
        "description": "Creates a radio button with the specified label and active state."
      },
      {
        "name": "RadioButton",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int*"
          },
          {
            "name": "v_button",
            "type": "int"
          }
        ],
        "description": "Creates a radio button that sets the specified integer value when clicked."
      },
      {
        "name": "ProgressBar",
        "return_type": "void",
        "parameters": [
          {
            "name": "fraction",
            "type": "float"
          },
          {
            "name": "size_arg",
            "type": "const ImVec2&",
            "default": "ImVec2(-FLT_MIN, 0)"
          },
          {
            "name": "overlay",
            "type": "const char*",
            "default": "NULL"
          }
        ],
        "description": "Creates a progress bar with the specified fraction of completion, size, and optional overlay text."
      },
      {
        "name": "Bullet",
        "return_type": "void",
        "parameters": [],
        "description": "Draws a small circle and keeps the cursor on the same line. Advances cursor x position by GetTreeNodeToLabelSpacing(), the same distance that TreeNode() uses."
      },
      {
        "name": "TextLink",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          }
        ],
        "description": "Creates a hyperlink-style text button that returns true when clicked."
      },
      {
        "name": "TextLinkOpenURL",
        "return_type": "void",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "url",
            "type": "const char*",
            "default": "NULL"
          }
        ],
        "description": "Creates a hyperlink-style text button that automatically opens the specified URL when clicked."
      },
      {
        "name": "Image",
        "return_type": "void",
        "parameters": [
          {
            "name": "user_texture_id",
            "type": "ImTextureID"
          },
          {
            "name": "image_size",
            "type": "const ImVec2&"
          },
          {
            "name": "uv0",
            "type": "const ImVec2&",
            "default": "ImVec2(0, 0)"
          },
          {
            "name": "uv1",
            "type": "const ImVec2&",
            "default": "ImVec2(1, 1)"
          },
          {
            "name": "tint_col",
            "type": "const ImVec4&",
            "default": "ImVec4(1, 1, 1, 1)"
          },
          {
            "name": "border_col",
            "type": "const ImVec4&",
            "default": "ImVec4(0, 0, 0, 0)"
          }
        ],
        "description": "Displays an image using the provided texture ID, size, UV coordinates, tint color, and border color."
      },
      {
        "name": "ImageButton",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "user_texture_id",
            "type": "ImTextureID"
          },
          {
            "name": "image_size",
            "type": "const ImVec2&"
          },
          {
            "name": "uv0",
            "type": "const ImVec2&",
            "default": "ImVec2(0, 0)"
          },
          {
            "name": "uv1",
            "type": "const ImVec2&",
            "default": "ImVec2(1, 1)"
          },
          {
            "name": "bg_col",
            "type": "const ImVec4&",
            "default": "ImVec4(0, 0, 0, 0)"
          },
          {
            "name": "tint_col",
            "type": "const ImVec4&",
            "default": "ImVec4(1, 1, 1, 1)"
          }
        ],
        "description": "Creates a button with an image, using the provided texture ID, size, UV coordinates, background color, and tint color."
      },
      {
        "name": "BeginCombo",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "preview_value",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "ImGuiComboFlags",
            "default": "0"
          }
        ],
        "description": "Begins a combo box (dropdown) with the specified label and preview value. Returns true if the combo box is open."
      },
      {
        "name": "EndCombo",
        "return_type": "void",
        "parameters": [],
        "description": "Ends a combo box. Should only be called if BeginCombo() returns true."
      },
      {
        "name": "Combo",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "current_item",
            "type": "int*"
          },
          {
            "name": "items",
            "type": "const char* const[]"
          },
          {
            "name": "items_count",
            "type": "int"
          },
          {
            "name": "popup_max_height_in_items",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Creates a combo box (dropdown) with the specified label, current item index, and items array. Returns true if the selection is changed."
      },
      {
        "name": "Combo",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "current_item",
            "type": "int*"
          },
          {
            "name": "items_separated_by_zeros",
            "type": "const char*"
          },
          {
            "name": "popup_max_height_in_items",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Creates a combo box (dropdown) with items separated by null characters. Returns true if the selection is changed."
      },
      {
        "name": "Combo",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "current_item",
            "type": "int*"
          },
          {
            "name": "getter",
            "type": "const char* (*)(void* user_data, int idx)"
          },
          {
            "name": "user_data",
            "type": "void*"
          },
          {
            "name": "items_count",
            "type": "int"
          },
          {
            "name": "popup_max_height_in_items",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Creates a combo box (dropdown) with a custom item getter function. Returns true if the selection is changed."
      },
      {
        "name": "DragFloat",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float*"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "v_min",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "v_max",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable float slider with the specified label, value, speed, minimum/maximum values, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "DragFloat2",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float[2]"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "v_min",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "v_max",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable float2 slider with the specified label, value, speed, minimum/maximum values, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "DragFloat3",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float[3]"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "v_min",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "v_max",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable float3 slider with the specified label, value, speed, minimum/maximum values, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "DragFloat4",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float[4]"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "v_min",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "v_max",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable float4 slider with the specified label, value, speed, minimum/maximum values, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "DragFloatRange2",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v_current_min",
            "type": "float*"
          },
          {
            "name": "v_current_max",
            "type": "float*"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "v_min",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "v_max",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "format_max",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable float range slider with the specified label, current min/max values, speed, minimum/maximum values, format strings, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "DragInt",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int*"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "v_min",
            "type": "int",
            "default": "0"
          },
          {
            "name": "v_max",
            "type": "int",
            "default": "0"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%d\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable integer slider with the specified label, value, speed, minimum/maximum values, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "DragInt2",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int[2]"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "v_min",
            "type": "int",
            "default": "0"
          },
          {
            "name": "v_max",
            "type": "int",
            "default": "0"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%d\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable int2 slider with the specified label, value, speed, minimum/maximum values, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "DragInt3",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int[3]"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "v_min",
            "type": "int",
            "default": "0"
          },
          {
            "name": "v_max",
            "type": "int",
            "default": "0"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%d\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable int3 slider with the specified label, value, speed, minimum/maximum values, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "DragInt4",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int[4]"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "v_min",
            "type": "int",
            "default": "0"
          },
          {
            "name": "v_max",
            "type": "int",
            "default": "0"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%d\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable int4 slider with the specified label, value, speed, minimum/maximum values, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "DragIntRange2",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v_current_min",
            "type": "int*"
          },
          {
            "name": "v_current_max",
            "type": "int*"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "v_min",
            "type": "int",
            "default": "0"
          },
          {
            "name": "v_max",
            "type": "int",
            "default": "0"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%d\""
          },
          {
            "name": "format_max",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable integer range slider with the specified label, current min/max values, speed, minimum/maximum values, format strings, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "DragScalar",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "data_type",
            "type": "ImGuiDataType"
          },
          {
            "name": "p_data",
            "type": "void*"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "p_min",
            "type": "const void*",
            "default": "NULL"
          },
          {
            "name": "p_max",
            "type": "const void*",
            "default": "NULL"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable scalar slider for arbitrary data types with the specified label, data type, value, speed, minimum/maximum values, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "DragScalarN",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "data_type",
            "type": "ImGuiDataType"
          },
          {
            "name": "p_data",
            "type": "void*"
          },
          {
            "name": "components",
            "type": "int"
          },
          {
            "name": "v_speed",
            "type": "float",
            "default": "1.0f"
          },
          {
            "name": "p_min",
            "type": "const void*",
            "default": "NULL"
          },
          {
            "name": "p_max",
            "type": "const void*",
            "default": "NULL"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a draggable scalar slider for arbitrary data types with the specified label, data type, value, number of components, speed, minimum/maximum values, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "SliderFloat",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float*"
          },
          {
            "name": "v_min",
            "type": "float"
          },
          {
            "name": "v_max",
            "type": "float"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a slider for floating-point values with the specified label, value, min/max range, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "SliderFloat2",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float[2]"
          },
          {
            "name": "v_min",
            "type": "float"
          },
          {
            "name": "v_max",
            "type": "float"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a slider for two floating-point values with the specified label, values, min/max range, format string, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "SliderFloat3",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float[3]"
          },
          {
            "name": "v_min",
            "type": "float"
          },
          {
            "name": "v_max",
            "type": "float"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a slider for three floating-point values with the specified label, values, min/max range, format string, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "SliderFloat4",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float[4]"
          },
          {
            "name": "v_min",
            "type": "float"
          },
          {
            "name": "v_max",
            "type": "float"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a slider for four floating-point values with the specified label, values, min/max range, format string, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "SliderAngle",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v_rad",
            "type": "float*"
          },
          {
            "name": "v_degrees_min",
            "type": "float",
            "default": "-360.0f"
          },
          {
            "name": "v_degrees_max",
            "type": "float",
            "default": "+360.0f"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.0f deg\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a slider for angles with the specified label, value in radians, min/max range in degrees, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "SliderInt",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int*"
          },
          {
            "name": "v_min",
            "type": "int"
          },
          {
            "name": "v_max",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%d\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a slider for integer values with the specified label, value, min/max range, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "SliderInt2",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int[2]"
          },
          {
            "name": "v_min",
            "type": "int"
          },
          {
            "name": "v_max",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%d\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a slider for two integer values with the specified label, values, min/max range, format string, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "SliderInt3",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int[3]"
          },
          {
            "name": "v_min",
            "type": "int"
          },
          {
            "name": "v_max",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%d\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a slider for three integer values with the specified label, values, min/max range, format string, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "SliderInt4",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int[4]"
          },
          {
            "name": "v_min",
            "type": "int"
          },
          {
            "name": "v_max",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%d\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a slider for four integer values with the specified label, values, min/max range, format string, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "SliderScalar",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "data_type",
            "type": "ImGuiDataType"
          },
          {
            "name": "p_data",
            "type": "void*"
          },
          {
            "name": "p_min",
            "type": "const void*"
          },
          {
            "name": "p_max",
            "type": "const void*"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a slider for arbitrary scalar types with the specified label, data type, value, min/max range, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "SliderScalarN",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "data_type",
            "type": "ImGuiDataType"
          },
          {
            "name": "p_data",
            "type": "void*"
          },
          {
            "name": "components",
            "type": "int"
          },
          {
            "name": "p_min",
            "type": "const void*"
          },
          {
            "name": "p_max",
            "type": "const void*"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a slider for multiple scalar values of arbitrary types with the specified label, data type, values, min/max range, format string, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "VSliderFloat",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "size",
            "type": "const ImVec2&"
          },
          {
            "name": "v",
            "type": "float*"
          },
          {
            "name": "v_min",
            "type": "float"
          },
          {
            "name": "v_max",
            "type": "float"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a vertical slider for floating-point values with the specified label, size, value, min/max range, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "VSliderInt",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "size",
            "type": "const ImVec2&"
          },
          {
            "name": "v",
            "type": "int*"
          },
          {
            "name": "v_min",
            "type": "int"
          },
          {
            "name": "v_max",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%d\""
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a vertical slider for integer values with the specified label, size, value, min/max range, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "VSliderScalar",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "size",
            "type": "const ImVec2&"
          },
          {
            "name": "data_type",
            "type": "ImGuiDataType"
          },
          {
            "name": "p_data",
            "type": "void*"
          },
          {
            "name": "p_min",
            "type": "const void*"
          },
          {
            "name": "p_max",
            "type": "const void*"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiSliderFlags",
            "default": "0"
          }
        ],
        "description": "Creates a vertical slider for arbitrary scalar types with the specified label, size, data type, value, min/max range, format string, and optional flags. Returns true if the value is changed."
      },
      {
        "name": "InputText",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "buf",
            "type": "char*"
          },
          {
            "name": "buf_size",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          },
          {
            "name": "callback",
            "type": "ImGuiInputTextCallback",
            "default": "NULL"
          },
          {
            "name": "user_data",
            "type": "void*",
            "default": "NULL"
          }
        ],
        "description": "Creates a text input field with the specified label, buffer, buffer size, optional flags, callback, and user data. Returns true if the text is changed."
      },
      {
        "name": "InputTextMultiline",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "buf",
            "type": "char*"
          },
          {
            "name": "buf_size",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "const ImVec2&",
            "default": "ImVec2(0, 0)"
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          },
          {
            "name": "callback",
            "type": "ImGuiInputTextCallback",
            "default": "NULL"
          },
          {
            "name": "user_data",
            "type": "void*",
            "default": "NULL"
          }
        ],
        "description": "Creates a multiline text input field with the specified label, buffer, buffer size, size, optional flags, callback, and user data. Returns true if the text is changed."
      },
      {
        "name": "InputTextWithHint",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "hint",
            "type": "const char*"
          },
          {
            "name": "buf",
            "type": "char*"
          },
          {
            "name": "buf_size",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          },
          {
            "name": "callback",
            "type": "ImGuiInputTextCallback",
            "default": "NULL"
          },
          {
            "name": "user_data",
            "type": "void*",
            "default": "NULL"
          }
        ],
        "description": "Creates a text input field with a hint, using the specified label, hint, buffer, buffer size, optional flags, callback, and user data. Returns true if the text is changed."
      },
      {
        "name": "InputFloat",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float*"
          },
          {
            "name": "step",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "step_fast",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          }
        ],
        "description": "Creates a text input field for floating-point values with the specified label, value, optional step, fast step, format string, and flags. Returns true if the value is changed."
      },
      {
        "name": "InputFloat2",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float[2]"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          }
        ],
        "description": "Creates a text input field for two floating-point values with the specified label, values, format string, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "InputFloat3",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float[3]"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          }
        ],
        "description": "Creates a text input field for three floating-point values with the specified label, values, format string, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "InputFloat4",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float[4]"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.3f\""
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          }
        ],
        "description": "Creates a text input field for four floating-point values with the specified label, values, format string, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "InputInt",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int*"
          },
          {
            "name": "step",
            "type": "int",
            "default": "1"
          },
          {
            "name": "step_fast",
            "type": "int",
            "default": "100"
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          }
        ],
        "description": "Creates a text input field for integer values with the specified label, value, optional step, fast step, and flags. Returns true if the value is changed."
      },
      {
        "name": "InputInt2",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int[2]"
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          }
        ],
        "description": "Creates a text input field for two integer values with the specified label, values, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "InputInt3",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int[3]"
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          }
        ],
        "description": "Creates a text input field for three integer values with the specified label, values, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "InputInt4",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int[4]"
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          }
        ],
        "description": "Creates a text input field for four integer values with the specified label, values, and optional flags. Returns true if the values are changed."
      },
      {
        "name": "InputDouble",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "double*"
          },
          {
            "name": "step",
            "type": "double",
            "default": "0.0"
          },
          {
            "name": "step_fast",
            "type": "double",
            "default": "0.0"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "\"%.6f\""
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          }
        ],
        "description": "Creates a text input field for double values with the specified label, value, optional step, fast step, format string, and flags. Returns true if the value is changed."
      },
      {
        "name": "InputScalar",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "data_type",
            "type": "ImGuiDataType"
          },
          {
            "name": "p_data",
            "type": "void*"
          },
          {
            "name": "p_step",
            "type": "const void*",
            "default": "NULL"
          },
          {
            "name": "p_step_fast",
            "type": "const void*",
            "default": "NULL"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          }
        ],
        "description": "Creates a text input field for arbitrary scalar types with the specified label, data type, value, optional step, fast step, format string, and flags. Returns true if the value is changed."
      },
      {
        "name": "InputScalarN",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "data_type",
            "type": "ImGuiDataType"
          },
          {
            "name": "p_data",
            "type": "void*"
          },
          {
            "name": "components",
            "type": "int"
          },
          {
            "name": "p_step",
            "type": "const void*",
            "default": "NULL"
          },
          {
            "name": "p_step_fast",
            "type": "const void*",
            "default": "NULL"
          },
          {
            "name": "format",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiInputTextFlags",
            "default": "0"
          }
        ],
        "description": "Creates a text input field for multiple scalar values of arbitrary types with the specified label, data type, values, optional step, fast step, format string, and flags. Returns true if the values are changed."
      },
      {
        "name": "ColorEdit3",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "col",
            "type": "float[3]"
          },
          {
            "name": "flags",
            "type": "ImGuiColorEditFlags",
            "default": "0"
          }
        ],
        "description": "Edits an RGB color value with an optional set of flags. Returns true if the color was changed."
      },
      {
        "name": "ColorEdit4",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "col",
            "type": "float[4]"
          },
          {
            "name": "flags",
            "type": "ImGuiColorEditFlags",
            "default": "0"
          }
        ],
        "description": "Edits an RGBA color value with an optional set of flags. Returns true if the color was changed."
      },
      {
        "name": "ColorPicker3",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "col",
            "type": "float[3]"
          },
          {
            "name": "flags",
            "type": "ImGuiColorEditFlags",
            "default": "0"
          }
        ],
        "description": "Displays a color picker for an RGB color value with an optional set of flags. Returns true if the color was changed."
      },
      {
        "name": "ColorPicker4",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "col",
            "type": "float[4]"
          },
          {
            "name": "flags",
            "type": "ImGuiColorEditFlags",
            "default": "0"
          },
          {
            "name": "ref_col",
            "type": "const float*",
            "default": "NULL"
          }
        ],
        "description": "Displays a color picker for an RGBA color value with an optional set of flags and reference color. Returns true if the color was changed."
      },
      {
        "name": "ColorButton",
        "return_type": "bool",
        "parameters": [
          {
            "name": "desc_id",
            "type": "const char*"
          },
          {
            "name": "col",
            "type": "const ImVec4&"
          },
          {
            "name": "flags",
            "type": "ImGuiColorEditFlags",
            "default": "0"
          },
          {
            "name": "size",
            "type": "const ImVec2&",
            "default": "ImVec2(0, 0)"
          }
        ],
        "description": "Displays a color square/button with the specified color, size, and flags. Returns true if the button was pressed."
      },
      {
        "name": "SetColorEditOptions",
        "return_type": "void",
        "parameters": [
          {
            "name": "flags",
            "type": "ImGuiColorEditFlags"
          }
        ],
        "description": "Sets the color edit options, typically called during application startup. Allows selecting a default format, picker type, etc."
      },
      {
        "name": "TreeNode",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          }
        ],
        "description": "Creates a tree node with the specified label. Returns true if the node is open, in which case TreePop() should be called to close it."
      },
      {
        "name": "TreeNode",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "fmt",
            "type": "const char*",
            "annotation": "IM_FMTARGS(2)"
          }
        ],
        "description": "Creates a tree node with the specified ID and formatted label. Returns true if the node is open."
      },
      {
        "name": "TreeNode",
        "return_type": "bool",
        "parameters": [
          {
            "name": "ptr_id",
            "type": "const void*"
          },
          {
            "name": "fmt",
            "type": "const char*",
            "annotation": "IM_FMTARGS(2)"
          }
        ],
        "description": "Creates a tree node with the specified pointer ID and formatted label. Returns true if the node is open."
      },
      {
        "name": "TreeNodeV",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "fmt",
            "type": "const char*",
            "annotation": "IM_FMTLIST(2)"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Creates a tree node with the specified ID and formatted label (va_list version). Returns true if the node is open."
      },
      {
        "name": "TreeNodeV",
        "return_type": "bool",
        "parameters": [
          {
            "name": "ptr_id",
            "type": "const void*"
          },
          {
            "name": "fmt",
            "type": "const char*",
            "annotation": "IM_FMTLIST(2)"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Creates a tree node with the specified pointer ID and formatted label (va_list version). Returns true if the node is open."
      },
      {
        "name": "TreeNodeEx",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "ImGuiTreeNodeFlags",
            "default": "0"
          }
        ],
        "description": "Creates an extended tree node with the specified label and flags. Returns true if the node is open."
      },
      {
        "name": "TreeNodeEx",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "ImGuiTreeNodeFlags",
            "default": "0"
          },
          {
            "name": "fmt",
            "type": "const char*",
            "annotation": "IM_FMTARGS(3)"
          }
        ],
        "description": "Creates an extended tree node with the specified ID, formatted label, and flags. Returns true if the node is open."
      },
      {
        "name": "TreeNodeEx",
        "return_type": "bool",
        "parameters": [
          {
            "name": "ptr_id",
            "type": "const void*"
          },
          {
            "name": "flags",
            "type": "ImGuiTreeNodeFlags",
            "default": "0"
          },
          {
            "name": "fmt",
            "type": "const char*",
            "annotation": "IM_FMTARGS(3)"
          }
        ],
        "description": "Creates an extended tree node with the specified pointer ID, formatted label, and flags. Returns true if the node is open."
      },
      {
        "name": "TreeNodeExV",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "ImGuiTreeNodeFlags",
            "default": "0"
          },
          {
            "name": "fmt",
            "type": "const char*",
            "annotation": "IM_FMTLIST(3)"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Creates an extended tree node with the specified ID, formatted label (va_list version), and flags. Returns true if the node is open."
      },
      {
        "name": "TreeNodeExV",
        "return_type": "bool",
        "parameters": [
          {
            "name": "ptr_id",
            "type": "const void*"
          },
          {
            "name": "flags",
            "type": "ImGuiTreeNodeFlags",
            "default": "0"
          },
          {
            "name": "fmt",
            "type": "const char*",
            "annotation": "IM_FMTLIST(3)"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Creates an extended tree node with the specified pointer ID, formatted label (va_list version), and flags. Returns true if the node is open."
      },
      {
        "name": "TreePush",
        "return_type": "void",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          }
        ],
        "description": "Pushes a string into the tree node stack, increasing the indentation level."
      },
      {
        "name": "TreePush",
        "return_type": "void",
        "parameters": [
          {
            "name": "ptr_id",
            "type": "const void*"
          }
        ],
        "description": "Pushes a pointer into the tree node stack, increasing the indentation level."
      },
      {
        "name": "TreePop",
        "return_type": "void",
        "parameters": [],
        "description": "Pops the last element from the tree node stack, decreasing the indentation level."
      },
      {
        "name": "GetTreeNodeToLabelSpacing",
        "return_type": "float",
        "parameters": [],
        "description": "Returns the horizontal distance preceding the label when using TreeNode() or Bullet()."
      },
      {
        "name": "CollapsingHeader",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "ImGuiTreeNodeFlags",
            "default": "0"
          }
        ],
        "description": "Creates a collapsible header with the specified label and flags. Returns true if the header is open."
      },
      {
        "name": "CollapsingHeader",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "p_visible",
            "type": "bool*"
          },
          {
            "name": "flags",
            "type": "ImGuiTreeNodeFlags",
            "default": "0"
          }
        ],
        "description": "Creates a collapsible header with the specified label, visibility flag, and flags. Returns true if the header is open."
      },
      {
        "name": "SetNextItemOpen",
        "return_type": "void",
        "parameters": [
          {
            "name": "is_open",
            "type": "bool"
          },
          {
            "name": "cond",
            "type": "ImGuiCond",
            "default": "0"
          }
        ],
        "description": "Sets the next TreeNode or CollapsingHeader open state."
      },
      {
        "name": "SetNextItemStorageID",
        "return_type": "void",
        "parameters": [
          {
            "name": "storage_id",
            "type": "ImGuiID"
          }
        ],
        "description": "Sets the storage ID to use for the next TreeNode or CollapsingHeader."
      },
      {
        "name": "Selectable",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "selected",
            "type": "bool",
            "default": "false"
          },
          {
            "name": "flags",
            "type": "ImGuiSelectableFlags",
            "default": "0"
          },
          {
            "name": "size",
            "type": "const ImVec2&",
            "default": "ImVec2(0, 0)"
          }
        ],
        "description": "Creates a selectable item with the specified label, selection state, flags, and size. Returns true if the item is clicked."
      },
      {
        "name": "Selectable",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "p_selected",
            "type": "bool*"
          },
          {
            "name": "flags",
            "type": "ImGuiSelectableFlags",
            "default": "0"
          },
          {
            "name": "size",
            "type": "const ImVec2&",
            "default": "ImVec2(0, 0)"
          }
        ],
        "description": "Creates a selectable item with the specified label, pointer to the selection state, flags, and size. Returns true if the item is clicked."
      },
      {
        "name": "BeginMultiSelect",
        "return_type": "ImGuiMultiSelectIO*",
        "parameters": [
          {
            "name": "flags",
            "type": "ImGuiMultiSelectFlags"
          },
          {
            "name": "selection_size",
            "type": "int",
            "default": "-1"
          },
          {
            "name": "items_count",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Begins a multi-select operation. Returns a pointer to ImGuiMultiSelectIO."
      },
      {
        "name": "EndMultiSelect",
        "return_type": "ImGuiMultiSelectIO*",
        "parameters": [],
        "description": "Ends a multi-select operation. Returns a pointer to ImGuiMultiSelectIO."
      },
      {
        "name": "SetNextItemSelectionUserData",
        "return_type": "void",
        "parameters": [
          {
            "name": "selection_user_data",
            "type": "ImGuiSelectionUserData"
          }
        ],
        "description": "Sets user data for the next item's selection."
      },
      {
        "name": "IsItemToggledSelection",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if the selection state of the last item was toggled. Useful for retrieving per-item information before reaching EndMultiSelect."
      },
      {
        "name": "BeginListBox",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "size",
            "type": "const ImVec2&",
            "default": "ImVec2(0, 0)"
          }
        ],
        "description": "Opens a framed scrolling region for a list box with the specified label and size."
      },
      {
        "name": "EndListBox",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the list box opened by BeginListBox. Should be called only if BeginListBox returned true."
      },
      {
        "name": "ListBox",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "current_item",
            "type": "int*"
          },
          {
            "name": "items",
            "type": "const char* const[]"
          },
          {
            "name": "items_count",
            "type": "int"
          },
          {
            "name": "height_in_items",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Displays a list box with the specified label, current item index, items array, item count, and optional height in items. Returns true if the current item was changed."
      },
      {
        "name": "ListBox",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "current_item",
            "type": "int*"
          },
          {
            "name": "getter",
            "type": "const char* (*)(void* user_data, int idx)"
          },
          {
            "name": "user_data",
            "type": "void*"
          },
          {
            "name": "items_count",
            "type": "int"
          },
          {
            "name": "height_in_items",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Displays a list box with the specified label, current item index, getter function, user data, item count, and optional height in items. Returns true if the current item was changed."
      },
      {
        "name": "PlotLines",
        "return_type": "void",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "values",
            "type": "const float*"
          },
          {
            "name": "values_count",
            "type": "int"
          },
          {
            "name": "values_offset",
            "type": "int",
            "default": "0"
          },
          {
            "name": "overlay_text",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "scale_min",
            "type": "float",
            "default": "FLT_MAX"
          },
          {
            "name": "scale_max",
            "type": "float",
            "default": "FLT_MAX"
          },
          {
            "name": "graph_size",
            "type": "ImVec2",
            "default": "ImVec2(0, 0)"
          },
          {
            "name": "stride",
            "type": "int",
            "default": "sizeof(float)"
          }
        ],
        "description": "Plots a series of lines using the specified label, values array, value count, and optional parameters."
      },
      {
        "name": "PlotLines",
        "return_type": "void",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "values_getter",
            "type": "float(*)(void* data, int idx)"
          },
          {
            "name": "data",
            "type": "void*"
          },
          {
            "name": "values_count",
            "type": "int"
          },
          {
            "name": "values_offset",
            "type": "int",
            "default": "0"
          },
          {
            "name": "overlay_text",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "scale_min",
            "type": "float",
            "default": "FLT_MAX"
          },
          {
            "name": "scale_max",
            "type": "float",
            "default": "FLT_MAX"
          },
          {
            "name": "graph_size",
            "type": "ImVec2",
            "default": "ImVec2(0, 0)"
          }
        ],
        "description": "Plots a series of lines using a getter function with the specified label, data, value count, and optional parameters."
      },
      {
        "name": "PlotHistogram",
        "return_type": "void",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "values",
            "type": "const float*"
          },
          {
            "name": "values_count",
            "type": "int"
          },
          {
            "name": "values_offset",
            "type": "int",
            "default": "0"
          },
          {
            "name": "overlay_text",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "scale_min",
            "type": "float",
            "default": "FLT_MAX"
          },
          {
            "name": "scale_max",
            "type": "float",
            "default": "FLT_MAX"
          },
          {
            "name": "graph_size",
            "type": "ImVec2",
            "default": "ImVec2(0, 0)"
          },
          {
            "name": "stride",
            "type": "int",
            "default": "sizeof(float)"
          }
        ],
        "description": "Plots a histogram using the specified label, values array, value count, and optional parameters."
      },
      {
        "name": "PlotHistogram",
        "return_type": "void",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "values_getter",
            "type": "float(*)(void* data, int idx)"
          },
          {
            "name": "data",
            "type": "void*"
          },
          {
            "name": "values_count",
            "type": "int"
          },
          {
            "name": "values_offset",
            "type": "int",
            "default": "0"
          },
          {
            "name": "overlay_text",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "scale_min",
            "type": "float",
            "default": "FLT_MAX"
          },
          {
            "name": "scale_max",
            "type": "float",
            "default": "FLT_MAX"
          },
          {
            "name": "graph_size",
            "type": "ImVec2",
            "default": "ImVec2(0, 0)"
          }
        ],
        "description": "Plots a histogram using a getter function with the specified label, data, value count, and optional parameters."
      },
      {
        "name": "Value",
        "return_type": "void",
        "parameters": [
          {
            "name": "prefix",
            "type": "const char*"
          },
          {
            "name": "b",
            "type": "bool"
          }
        ],
        "description": "Displays a boolean value with a prefix in the format \"prefix: value\"."
      },
      {
        "name": "Value",
        "return_type": "void",
        "parameters": [
          {
            "name": "prefix",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "int"
          }
        ],
        "description": "Displays an integer value with a prefix in the format \"prefix: value\"."
      },
      {
        "name": "Value",
        "return_type": "void",
        "parameters": [
          {
            "name": "prefix",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "unsigned int"
          }
        ],
        "description": "Displays an unsigned integer value with a prefix in the format \"prefix: value\"."
      },
      {
        "name": "Value",
        "return_type": "void",
        "parameters": [
          {
            "name": "prefix",
            "type": "const char*"
          },
          {
            "name": "v",
            "type": "float"
          },
          {
            "name": "float_format",
            "type": "const char*",
            "default": "NULL"
          }
        ],
        "description": "Displays a floating-point value with a prefix in the format \"prefix: value\". Optionally specify the format for the float."
      },
      {
        "name": "BeginMenuBar",
        "return_type": "bool",
        "parameters": [],
        "description": "Appends to the menu bar of the current window. Requires ImGuiWindowFlags_MenuBar flag to be set on the parent window."
      },
      {
        "name": "EndMenuBar",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the menu bar. Should be called only if BeginMenuBar() returned true."
      },
      {
        "name": "BeginMainMenuBar",
        "return_type": "bool",
        "parameters": [],
        "description": "Creates and appends to a full-screen menu bar."
      },
      {
        "name": "EndMainMenuBar",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the main menu bar. Should be called only if BeginMainMenuBar() returned true."
      },
      {
        "name": "BeginMenu",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "enabled",
            "type": "bool",
            "default": "true"
          }
        ],
        "description": "Creates a sub-menu entry. Should call EndMenu() if this returns true."
      },
      {
        "name": "EndMenu",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the menu created by BeginMenu(). Should be called only if BeginMenu() returned true."
      },
      {
        "name": "MenuItem",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "shortcut",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "selected",
            "type": "bool",
            "default": "false"
          },
          {
            "name": "enabled",
            "type": "bool",
            "default": "true"
          }
        ],
        "description": "Creates a menu item with an optional shortcut, selection state, and enabled state. Returns true when activated."
      },
      {
        "name": "MenuItem",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "shortcut",
            "type": "const char*"
          },
          {
            "name": "p_selected",
            "type": "bool*"
          },
          {
            "name": "enabled",
            "type": "bool",
            "default": "true"
          }
        ],
        "description": "Creates a menu item with an optional shortcut and enabled state, and toggles the selection state if p_selected is not NULL. Returns true when activated."
      },
      {
        "name": "BeginTooltip",
        "return_type": "bool",
        "parameters": [],
        "description": "Begins a tooltip window. Should call EndTooltip() if this returns true."
      },
      {
        "name": "EndTooltip",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the tooltip window. Should be called only if BeginTooltip() or BeginItemTooltip() returned true."
      },
      {
        "name": "SetTooltip",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "...",
            "type": "..."
          }
        ],
        "description": "Sets a text-only tooltip. Often used after a call to ImGui::IsItemHovered()."
      },
      {
        "name": "SetTooltipV",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Sets a text-only tooltip using a va_list of arguments."
      },
      {
        "name": "BeginItemTooltip",
        "return_type": "bool",
        "parameters": [],
        "description": "Begins a tooltip window if the preceding item was hovered. Should call EndTooltip() if this returns true."
      },
      {
        "name": "SetItemTooltip",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "...",
            "type": ""
          }
        ],
        "description": "Sets a text-only tooltip if the preceding item was hovered."
      },
      {
        "name": "SetItemTooltipV",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Sets a text-only tooltip using a va_list of arguments if the preceding item was hovered."
      },
      {
        "name": "BeginPopup",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "ImGuiWindowFlags",
            "default": "0"
          }
        ],
        "description": "Begins a popup window with the specified ID and flags. Should call EndPopup() if this returns true."
      },
      {
        "name": "BeginPopupModal",
        "return_type": "bool",
        "parameters": [
          {
            "name": "name",
            "type": "const char*"
          },
          {
            "name": "p_open",
            "type": "bool*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiWindowFlags",
            "default": "0"
          }
        ],
        "description": "Begins a modal popup window with the specified name and flags. Should call EndPopup() if this returns true."
      },
      {
        "name": "EndPopup",
        "return_type": "void",
        "parameters": [],
        "description": "Ends a popup window. Should be called only if BeginPopup() or BeginPopupModal() returned true."
      },
      {
        "name": "OpenPopup",
        "return_type": "void",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "popup_flags",
            "type": "ImGuiPopupFlags",
            "default": "0"
          }
        ],
        "description": "Marks the popup as open. Should not be called every frame."
      },
      {
        "name": "OpenPopup",
        "return_type": "void",
        "parameters": [
          {
            "name": "id",
            "type": "ImGuiID"
          },
          {
            "name": "popup_flags",
            "type": "ImGuiPopupFlags",
            "default": "0"
          }
        ],
        "description": "Marks the popup with the specified ID as open, facilitating calling from nested stacks."
      },
      {
        "name": "OpenPopupOnItemClick",
        "return_type": "void",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "popup_flags",
            "type": "ImGuiPopupFlags",
            "default": "1"
          }
        ],
        "description": "Helper to open a popup when clicked on the last item. Defaults to right mouse button click."
      },
      {
        "name": "CloseCurrentPopup",
        "return_type": "void",
        "parameters": [],
        "description": "Manually closes the current popup."
      },
      {
        "name": "BeginPopupContextItem",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "popup_flags",
            "type": "ImGuiPopupFlags",
            "default": "1"
          }
        ],
        "description": "Opens and begins a popup when clicked on the last item. Returns true if the popup is open."
      },
      {
        "name": "BeginPopupContextWindow",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "popup_flags",
            "type": "ImGuiPopupFlags",
            "default": "1"
          }
        ],
        "description": "Opens and begins a popup when clicked on the current window. Returns true if the popup is open."
      },
      {
        "name": "BeginPopupContextVoid",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "popup_flags",
            "type": "ImGuiPopupFlags",
            "default": "1"
          }
        ],
        "description": "Opens and begins a popup when clicked in a void area (where there are no windows). Returns true if the popup is open."
      },
      {
        "name": "IsPopupOpen",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "ImGuiPopupFlags",
            "default": "0"
          }
        ],
        "description": "Returns true if the popup with the specified ID is open."
      },
      {
        "name": "BeginTable",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "columns",
            "type": "int"
          },
          {
            "name": "flags",
            "type": "ImGuiTableFlags",
            "default": "0"
          },
          {
            "name": "outer_size",
            "type": "const ImVec2&",
            "default": "ImVec2(0.0f, 0.0f)"
          },
          {
            "name": "inner_width",
            "type": "float",
            "default": "0.0f"
          }
        ],
        "description": "Begins a table with the specified number of columns and options. Returns true if the table is successfully created."
      },
      {
        "name": "EndTable",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the table created by BeginTable(). Should be called only if BeginTable() returned true."
      },
      {
        "name": "TableNextRow",
        "return_type": "void",
        "parameters": [
          {
            "name": "row_flags",
            "type": "ImGuiTableRowFlags",
            "default": "0"
          },
          {
            "name": "min_row_height",
            "type": "float",
            "default": "0.0f"
          }
        ],
        "description": "Appends into the first cell of a new row."
      },
      {
        "name": "TableNextColumn",
        "return_type": "bool",
        "parameters": [],
        "description": "Appends into the next column (or the first column of the next row if currently in the last column). Returns true when the column is visible."
      },
      {
        "name": "TableSetColumnIndex",
        "return_type": "bool",
        "parameters": [
          {
            "name": "column_n",
            "type": "int"
          }
        ],
        "description": "Sets the current column index for the next item in the table."
      },
      {
        "name": "TableSetupColumn",
        "return_type": "void",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "ImGuiTableColumnFlags",
            "default": "0"
          },
          {
            "name": "init_width_or_weight",
            "type": "float",
            "default": "0.0f"
          },
          {
            "name": "user_id",
            "type": "ImGuiID",
            "default": "0"
          }
        ],
        "description": "Sets up a column in a table. You can provide a label, flags, initial width or weight, and an optional user ID."
      },
      {
        "name": "TableSetupScrollFreeze",
        "return_type": "void",
        "parameters": [
          {
            "name": "cols",
            "type": "int"
          },
          {
            "name": "rows",
            "type": "int"
          }
        ],
        "description": "Freezes the specified number of columns and rows, keeping them visible when the table is scrolled."
      },
      {
        "name": "TableHeader",
        "return_type": "void",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          }
        ],
        "description": "Submits a single header cell manually, rarely used."
      },
      {
        "name": "TableHeadersRow",
        "return_type": "void",
        "parameters": [],
        "description": "Submits a row with header cells based on data provided to TableSetupColumn(). Also submits the context menu."
      },
      {
        "name": "TableAngledHeadersRow",
        "return_type": "void",
        "parameters": [],
        "description": "Submits a row with angled headers for columns marked with the ImGuiTableColumnFlags_AngledHeader flag. This must be the first row."
      },
      {
        "name": "TableGetSortSpecs",
        "return_type": "ImGuiTableSortSpecs*",
        "parameters": [],
        "description": "Gets the latest sort specs for the table. Returns NULL if sorting is not active. Do not hold onto the returned pointer over multiple frames."
      },
      {
        "name": "TableGetColumnCount",
        "return_type": "int",
        "parameters": [],
        "description": "Returns the number of columns in the current table."
      },
      {
        "name": "TableGetColumnIndex",
        "return_type": "int",
        "parameters": [],
        "description": "Returns the current column index."
      },
      {
        "name": "TableGetRowIndex",
        "return_type": "int",
        "parameters": [],
        "description": "Returns the current row index."
      },
      {
        "name": "TableGetColumnName",
        "return_type": "const char*",
        "parameters": [
          {
            "name": "column_n",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Returns the name of the column specified by column_n. Pass -1 to use the current column."
      },
      {
        "name": "TableGetColumnFlags",
        "return_type": "ImGuiTableColumnFlags",
        "parameters": [
          {
            "name": "column_n",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Returns the flags associated with the specified column, or the current column if column_n is -1."
      },
      {
        "name": "TableSetColumnEnabled",
        "return_type": "void",
        "parameters": [
          {
            "name": "column_n",
            "type": "int"
          },
          {
            "name": "v",
            "type": "bool"
          }
        ],
        "description": "Changes the enabled/disabled state of a column. Set to false to hide the column."
      },
      {
        "name": "TableGetHoveredColumn",
        "return_type": "int",
        "parameters": [],
        "description": "Returns the index of the hovered column, or -1 if no column is hovered."
      },
      {
        "name": "TableSetBgColor",
        "return_type": "void",
        "parameters": [
          {
            "name": "target",
            "type": "ImGuiTableBgTarget"
          },
          {
            "name": "color",
            "type": "ImU32"
          },
          {
            "name": "column_n",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Sets the background color for a cell, row, or column. See ImGuiTableBgTarget_ flags for details."
      },
      {
        "name": "Columns",
        "return_type": "void",
        "parameters": [
          {
            "name": "count",
            "type": "int",
            "default": "1"
          },
          {
            "name": "id",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "border",
            "type": "bool",
            "default": "true"
          }
        ],
        "description": "Legacy columns API. Sets up a number of columns. Use Tables instead for new implementations."
      },
      {
        "name": "NextColumn",
        "return_type": "void",
        "parameters": [],
        "description": "Moves to the next column in the current row, or to the first column of the next row if the current row is finished."
      },
      {
        "name": "GetColumnIndex",
        "return_type": "int",
        "parameters": [],
        "description": "Returns the current column index in the legacy Columns API."
      },
      {
        "name": "GetColumnWidth",
        "return_type": "float",
        "parameters": [
          {
            "name": "column_index",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Returns the width of the specified column in pixels, or the current column if column_index is -1."
      },
      {
        "name": "SetColumnWidth",
        "return_type": "void",
        "parameters": [
          {
            "name": "column_index",
            "type": "int"
          },
          {
            "name": "width",
            "type": "float"
          }
        ],
        "description": "Sets the width of the specified column in pixels."
      },
      {
        "name": "GetColumnOffset",
        "return_type": "float",
        "parameters": [
          {
            "name": "column_index",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Gets the position of the column line in pixels from the left side of the content region."
      },
      {
        "name": "SetColumnOffset",
        "return_type": "void",
        "parameters": [
          {
            "name": "column_index",
            "type": "int"
          },
          {
            "name": "offset_x",
            "type": "float"
          }
        ],
        "description": "Sets the position of the column line in pixels from the left side of the content region."
      },
      {
        "name": "GetColumnsCount",
        "return_type": "int",
        "parameters": [],
        "description": "Returns the number of columns in the legacy Columns API."
      },
      {
        "name": "BeginTabBar",
        "return_type": "bool",
        "parameters": [
          {
            "name": "str_id",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "ImGuiTabBarFlags",
            "default": "0"
          }
        ],
        "description": "Begins a tab bar. Returns true if the tab bar is successfully created."
      },
      {
        "name": "EndTabBar",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the tab bar created by BeginTabBar(). Should be called only if BeginTabBar() returned true."
      },
      {
        "name": "BeginTabItem",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "p_open",
            "type": "bool*",
            "default": "NULL"
          },
          {
            "name": "flags",
            "type": "ImGuiTabItemFlags",
            "default": "0"
          }
        ],
        "description": "Begins a tab item. Returns true if the tab is selected."
      },
      {
        "name": "EndTabItem",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the tab item created by BeginTabItem(). Should be called only if BeginTabItem() returned true."
      },
      {
        "name": "TabItemButton",
        "return_type": "bool",
        "parameters": [
          {
            "name": "label",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "ImGuiTabItemFlags",
            "default": "0"
          }
        ],
        "description": "Creates a tab that behaves like a button. Returns true when clicked."
      },
      {
        "name": "SetTabItemClosed",
        "return_type": "void",
        "parameters": [
          {
            "name": "tab_or_docked_window_label",
            "type": "const char*"
          }
        ],
        "description": "Notifies the TabBar or Docking system of a closed tab or window ahead of time. This is useful to reduce visual flicker on reorderable tab bars."
      },
      {
        "name": "LogToTTY",
        "return_type": "void",
        "parameters": [
          {
            "name": "auto_open_depth",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Starts logging output to the terminal (stdout)."
      },
      {
        "name": "LogToFile",
        "return_type": "void",
        "parameters": [
          {
            "name": "auto_open_depth",
            "type": "int",
            "default": "-1"
          },
          {
            "name": "filename",
            "type": "const char*",
            "default": "NULL"
          }
        ],
        "description": "Starts logging output to a file. If filename is NULL, the log is written to 'imgui_log.txt'."
      },
      {
        "name": "LogToClipboard",
        "return_type": "void",
        "parameters": [
          {
            "name": "auto_open_depth",
            "type": "int",
            "default": "-1"
          }
        ],
        "description": "Starts logging output to the OS clipboard."
      },
      {
        "name": "LogFinish",
        "return_type": "void",
        "parameters": [],
        "description": "Stops logging and closes any file or clipboard output."
      },
      {
        "name": "LogButtons",
        "return_type": "void",
        "parameters": [],
        "description": "Helper function to display buttons for logging to tty, file, or clipboard."
      },
      {
        "name": "LogText",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "...",
            "type": ""
          }
        ],
        "description": "Logs formatted text directly to the current log output without displaying it on the screen."
      },
      {
        "name": "LogTextV",
        "return_type": "void",
        "parameters": [
          {
            "name": "fmt",
            "type": "const char*"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "description": "Logs formatted text directly to the current log output using a va_list for arguments."
      },
      {
        "name": "BeginDragDropSource",
        "return_type": "bool",
        "parameters": [
          {
            "name": "flags",
            "type": "ImGuiDragDropFlags",
            "default": "0"
          }
        ],
        "description": "Starts a drag-and-drop source. If this returns true, you should call SetDragDropPayload() and EndDragDropSource()."
      },
      {
        "name": "SetDragDropPayload",
        "return_type": "bool",
        "parameters": [
          {
            "name": "type",
            "type": "const char*"
          },
          {
            "name": "data",
            "type": "const void*"
          },
          {
            "name": "sz",
            "type": "size_t"
          },
          {
            "name": "cond",
            "type": "ImGuiCond",
            "default": "0"
          }
        ],
        "description": "Sets the payload data for the current drag-and-drop operation. The type is a user-defined string."
      },
      {
        "name": "EndDragDropSource",
        "return_type": "void",
        "parameters": [],
        "description": "Ends a drag-and-drop source operation. Should be called only if BeginDragDropSource() returns true."
      },
      {
        "name": "BeginDragDropTarget",
        "return_type": "bool",
        "parameters": [],
        "description": "Marks an item as a possible drag-and-drop target. If this returns true, you can call AcceptDragDropPayload() and EndDragDropTarget()."
      },
      {
        "name": "AcceptDragDropPayload",
        "return_type": "const ImGuiPayload*",
        "parameters": [
          {
            "name": "type",
            "type": "const char*"
          },
          {
            "name": "flags",
            "type": "ImGuiDragDropFlags",
            "default": "0"
          }
        ],
        "description": "Accepts the drag-and-drop payload if it matches the specified type. Returns the payload data if accepted."
      },
      {
        "name": "EndDragDropTarget",
        "return_type": "void",
        "parameters": [],
        "description": "Ends a drag-and-drop target operation. Should be called only if BeginDragDropTarget() returns true."
      },
      {
        "name": "GetDragDropPayload",
        "return_type": "const ImGuiPayload*",
        "parameters": [],
        "description": "Peeks directly into the current drag-and-drop payload from anywhere. Returns NULL if drag-and-drop is inactive."
      },
      {
        "name": "BeginDisabled",
        "return_type": "void",
        "parameters": [
          {
            "name": "disabled",
            "type": "bool",
            "default": "true"
          }
        ],
        "description": "Disables user interactions and dims item visuals. Can be nested."
      },
      {
        "name": "EndDisabled",
        "return_type": "void",
        "parameters": [],
        "description": "Ends the disabled section started by BeginDisabled()."
      },
      {
        "name": "PushClipRect",
        "return_type": "void",
        "parameters": [
          {
            "name": "clip_rect_min",
            "type": "const ImVec2&"
          },
          {
            "name": "clip_rect_max",
            "type": "const ImVec2&"
          },
          {
            "name": "intersect_with_current_clip_rect",
            "type": "bool"
          }
        ],
        "description": "Pushes a clipping rectangle onto the stack. Mouse hovering is affected by this call."
      },
      {
        "name": "PopClipRect",
        "return_type": "void",
        "parameters": [],
        "description": "Pops the last clipping rectangle from the stack."
      },
      {
        "name": "SetItemDefaultFocus",
        "return_type": "void",
        "parameters": [],
        "description": "Sets the last item as the default focused item of a window."
      },
      {
        "name": "SetKeyboardFocusHere",
        "return_type": "void",
        "parameters": [
          {
            "name": "offset",
            "type": "int",
            "default": "0"
          }
        ],
        "description": "Focuses the keyboard on the next widget. Positive offset can be used to access sub-components, and -1 to access the previous widget."
      },
      {
        "name": "SetNextItemAllowOverlap",
        "return_type": "void",
        "parameters": [],
        "description": "Allows the next item to overlap with others."
      },
      {
        "name": "IsItemHovered",
        "return_type": "bool",
        "parameters": [
          {
            "name": "flags",
            "type": "ImGuiHoveredFlags",
            "default": "0"
          }
        ],
        "description": "Checks if the last item is hovered and usable. Can be customized with ImGuiHoveredFlags."
      },
      {
        "name": "IsItemActive",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if the last item is active (e.g., button being held, text field being edited)."
      },
      {
        "name": "IsItemFocused",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if the last item is focused for keyboard or gamepad navigation."
      },
      {
        "name": "IsItemClicked",
        "return_type": "bool",
        "parameters": [
          {
            "name": "mouse_button",
            "type": "ImGuiMouseButton",
            "default": "0"
          }
        ],
        "description": "Checks if the last item is hovered and clicked with the specified mouse button."
      },
      {
        "name": "IsItemVisible",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if the last item is visible (i.e., not clipped or scrolled out of view)."
      },
      {
        "name": "IsItemEdited",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if the last item modified its underlying value or was pressed during this frame."
      },
      {
        "name": "IsItemActivated",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if the last item was just made active (previously inactive)."
      },
      {
        "name": "IsItemDeactivated",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if the last item was just made inactive (previously active). Useful for Undo/Redo patterns."
      },
      {
        "name": "IsItemDeactivatedAfterEdit",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if the last item was just made inactive and modified its value while active. Useful for Undo/Redo patterns."
      },
      {
        "name": "IsItemToggledOpen",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if the last item's open state was toggled (e.g., TreeNode())."
      },
      {
        "name": "IsAnyItemHovered",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if any item is currently hovered."
      },
      {
        "name": "IsAnyItemActive",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if any item is currently active."
      },
      {
        "name": "IsAnyItemFocused",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if any item is currently focused."
      },
      {
        "name": "GetItemID",
        "return_type": "ImGuiID",
        "parameters": [],
        "description": "Returns the ID of the last item."
      },
      {
        "name": "GetItemRectMin",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the upper-left bounding rectangle of the last item in screen space."
      },
      {
        "name": "GetItemRectMax",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the lower-right bounding rectangle of the last item in screen space."
      },
      {
        "name": "GetItemRectSize",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the size of the last item."
      },
      {
        "name": "GetMainViewport",
        "return_type": "ImGuiViewport*",
        "parameters": [],
        "description": "Returns the primary/default viewport. This is never NULL."
      },
      {
        "name": "GetBackgroundDrawList",
        "return_type": "ImDrawList*",
        "parameters": [],
        "description": "Returns a draw list for drawing shapes/text behind Dear ImGui content."
      },
      {
        "name": "GetForegroundDrawList",
        "return_type": "ImDrawList*",
        "parameters": [],
        "description": "Returns a draw list for drawing shapes/text over Dear ImGui content."
      },
      {
        "name": "IsRectVisible",
        "return_type": "bool",
        "parameters": [
          {
            "name": "size",
            "type": "const ImVec2&"
          }
        ],
        "description": "Checks if a rectangle (starting from the cursor position) of the given size is visible and not clipped."
      },
      {
        "name": "IsRectVisible",
        "return_type": "bool",
        "parameters": [
          {
            "name": "rect_min",
            "type": "const ImVec2&"
          },
          {
            "name": "rect_max",
            "type": "const ImVec2&"
          }
        ],
        "description": "Checks if a rectangle defined by rect_min and rect_max is visible and not clipped."
      },
      {
        "name": "GetTime",
        "return_type": "double",
        "parameters": [],
        "description": "Returns the global ImGui time, incremented by io.DeltaTime every frame."
      },
      {
        "name": "GetFrameCount",
        "return_type": "int",
        "parameters": [],
        "description": "Returns the global ImGui frame count, incremented by 1 every frame."
      },
      {
        "name": "GetDrawListSharedData",
        "return_type": "ImDrawListSharedData*",
        "parameters": [],
        "description": "Returns shared data for ImDrawList instances."
      },
      {
        "name": "GetStyleColorName",
        "return_type": "const char*",
        "parameters": [
          {
            "name": "idx",
            "type": "ImGuiCol"
          }
        ],
        "description": "Returns a string representing the enum value of a style color."
      },
      {
        "name": "SetStateStorage",
        "return_type": "void",
        "parameters": [
          {
            "name": "storage",
            "type": "ImGuiStorage*"
          }
        ],
        "description": "Replaces the current window storage with custom storage."
      },
      {
        "name": "GetStateStorage",
        "return_type": "ImGuiStorage*",
        "parameters": [],
        "description": "Returns the current state storage."
      },
      {
        "name": "CalcTextSize",
        "return_type": "ImVec2",
        "parameters": [
          {
            "name": "text",
            "type": "const char*"
          },
          {
            "name": "text_end",
            "type": "const char*",
            "default": "NULL"
          },
          {
            "name": "hide_text_after_double_hash",
            "type": "bool",
            "default": "false"
          },
          {
            "name": "wrap_width",
            "type": "float",
            "default": "-1.0f"
          }
        ],
        "description": "Calculates the size of a text string, considering optional wrapping and special handling of double hashes."
      },
      {
        "name": "ColorConvertU32ToFloat4",
        "return_type": "ImVec4",
        "parameters": [
          {
            "name": "in",
            "type": "ImU32"
          }
        ],
        "description": "Converts a packed 32-bit color value to a floating-point ImVec4."
      },
      {
        "name": "ColorConvertFloat4ToU32",
        "return_type": "ImU32",
        "parameters": [
          {
            "name": "in",
            "type": "const ImVec4&"
          }
        ],
        "description": "Converts a floating-point ImVec4 color to a packed 32-bit value."
      },
      {
        "name": "ColorConvertRGBtoHSV",
        "return_type": "void",
        "parameters": [
          {
            "name": "r",
            "type": "float"
          },
          {
            "name": "g",
            "type": "float"
          },
          {
            "name": "b",
            "type": "float"
          },
          {
            "name": "out_h",
            "type": "float&"
          },
          {
            "name": "out_s",
            "type": "float&"
          },
          {
            "name": "out_v",
            "type": "float&"
          }
        ],
        "description": "Converts RGB color values to HSV."
      },
      {
        "name": "ColorConvertHSVtoRGB",
        "return_type": "void",
        "parameters": [
          {
            "name": "h",
            "type": "float"
          },
          {
            "name": "s",
            "type": "float"
          },
          {
            "name": "v",
            "type": "float"
          },
          {
            "name": "out_r",
            "type": "float&"
          },
          {
            "name": "out_g",
            "type": "float&"
          },
          {
            "name": "out_b",
            "type": "float&"
          }
        ],
        "description": "Converts HSV color values to RGB."
      },
      {
        "name": "IsKeyDown",
        "return_type": "bool",
        "parameters": [
          {
            "name": "key",
            "type": "ImGuiKey"
          }
        ],
        "description": "Checks if a key is being held down."
      },
      {
        "name": "IsKeyPressed",
        "return_type": "bool",
        "parameters": [
          {
            "name": "key",
            "type": "ImGuiKey"
          },
          {
            "name": "repeat",
            "type": "bool",
            "default": "true"
          }
        ],
        "description": "Checks if a key was pressed (transitioned from not pressed to pressed). If repeat is true, considers io.KeyRepeatDelay / KeyRepeatRate."
      },
      {
        "name": "IsKeyReleased",
        "return_type": "bool",
        "parameters": [
          {
            "name": "key",
            "type": "ImGuiKey"
          }
        ],
        "description": "Checks if a key was released (transitioned from pressed to not pressed)."
      },
      {
        "name": "IsKeyChordPressed",
        "return_type": "bool",
        "parameters": [
          {
            "name": "key_chord",
            "type": "ImGuiKeyChord"
          }
        ],
        "description": "Checks if a key chord (combination of modifiers and a key) was pressed."
      },
      {
        "name": "GetKeyPressedAmount",
        "return_type": "int",
        "parameters": [
          {
            "name": "key",
            "type": "ImGuiKey"
          },
          {
            "name": "repeat_delay",
            "type": "float"
          },
          {
            "name": "rate",
            "type": "float"
          }
        ],
        "description": "Returns the number of times a key has been pressed considering the provided repeat rate and delay."
      },
      {
        "name": "GetKeyName",
        "return_type": "const char*",
        "parameters": [
          {
            "name": "key",
            "type": "ImGuiKey"
          }
        ],
        "description": "[DEBUG] Returns the English name of the key."
      },
      {
        "name": "SetNextFrameWantCaptureKeyboard",
        "return_type": "void",
        "parameters": [
          {
            "name": "want_capture_keyboard",
            "type": "bool"
          }
        ],
        "description": "Overrides the io.WantCaptureKeyboard flag for the next frame."
      },
      {
        "name": "Shortcut",
        "return_type": "bool",
        "parameters": [
          {
            "name": "key_chord",
            "type": "ImGuiKeyChord"
          },
          {
            "name": "flags",
            "type": "ImGuiInputFlags",
            "default": "0"
          }
        ],
        "description": "Submits a shortcut route, and returns true if the shortcut is currently active and routed."
      },
      {
        "name": "SetNextItemShortcut",
        "return_type": "void",
        "parameters": [
          {
            "name": "key_chord",
            "type": "ImGuiKeyChord"
          },
          {
            "name": "flags",
            "type": "ImGuiInputFlags",
            "default": "0"
          }
        ],
        "description": "Sets the shortcut for the next item."
      },
      {
        "name": "SetItemKeyOwner",
        "return_type": "void",
        "parameters": [
          {
            "name": "key",
            "type": "ImGuiKey"
          }
        ],
        "description": "Sets the key owner to the last item ID if it is hovered or active."
      },
      {
        "name": "IsMouseDown",
        "return_type": "bool",
        "parameters": [
          {
            "name": "button",
            "type": "ImGuiMouseButton"
          }
        ],
        "description": "Checks if a mouse button is being held down."
      },
      {
        "name": "IsMouseClicked",
        "return_type": "bool",
        "parameters": [
          {
            "name": "button",
            "type": "ImGuiMouseButton"
          },
          {
            "name": "repeat",
            "type": "bool",
            "default": "false"
          }
        ],
        "description": "Checks if a mouse button was clicked (transitioned from not pressed to pressed)."
      },
      {
        "name": "IsMouseReleased",
        "return_type": "bool",
        "parameters": [
          {
            "name": "button",
            "type": "ImGuiMouseButton"
          }
        ],
        "description": "Checks if a mouse button was released (transitioned from pressed to not pressed)."
      },
      {
        "name": "IsMouseDoubleClicked",
        "return_type": "bool",
        "parameters": [
          {
            "name": "button",
            "type": "ImGuiMouseButton"
          }
        ],
        "description": "Checks if a mouse button was double-clicked."
      },
      {
        "name": "GetMouseClickedCount",
        "return_type": "int",
        "parameters": [
          {
            "name": "button",
            "type": "ImGuiMouseButton"
          }
        ],
        "description": "Returns the number of successive clicks of a mouse button."
      },
      {
        "name": "IsMouseHoveringRect",
        "return_type": "bool",
        "parameters": [
          {
            "name": "r_min",
            "type": "const ImVec2&"
          },
          {
            "name": "r_max",
            "type": "const ImVec2&"
          },
          {
            "name": "clip",
            "type": "bool",
            "default": "true"
          }
        ],
        "description": "Checks if the mouse is hovering a given bounding rectangle in screen space."
      },
      {
        "name": "IsMousePosValid",
        "return_type": "bool",
        "parameters": [
          {
            "name": "mouse_pos",
            "type": "const ImVec2*",
            "default": "NULL"
          }
        ],
        "description": "Checks if the mouse position is valid."
      },
      {
        "name": "IsAnyMouseDown",
        "return_type": "bool",
        "parameters": [],
        "description": "Checks if any mouse button is being held down."
      },
      {
        "name": "GetMousePos",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the current mouse position."
      },
      {
        "name": "GetMousePosOnOpeningCurrentPopup",
        "return_type": "ImVec2",
        "parameters": [],
        "description": "Returns the mouse position at the time of opening the current popup."
      },
      {
        "name": "IsMouseDragging",
        "return_type": "bool",
        "parameters": [
          {
            "name": "button",
            "type": "ImGuiMouseButton"
          },
          {
            "name": "lock_threshold",
            "type": "float",
            "default": "-1.0f"
          }
        ],
        "description": "Checks if the mouse is dragging (moving while holding a button down)."
      },
      {
        "name": "GetMouseDragDelta",
        "return_type": "ImVec2",
        "parameters": [
          {
            "name": "button",
            "type": "ImGuiMouseButton",
            "default": "0"
          },
          {
            "name": "lock_threshold",
            "type": "float",
            "default": "-1.0f"
          }
        ],
        "description": "Returns the delta (change in position) from the initial click position while dragging."
      },
      {
        "name": "ResetMouseDragDelta",
        "return_type": "void",
        "parameters": [
          {
            "name": "button",
            "type": "ImGuiMouseButton",
            "default": "0"
          }
        ],
        "description": "Resets the mouse drag delta for the specified button."
      },
      {
        "name": "GetMouseCursor",
        "return_type": "ImGuiMouseCursor",
        "parameters": [],
        "description": "Returns the current desired mouse cursor shape."
      },
      {
        "name": "SetMouseCursor",
        "return_type": "void",
        "parameters": [
          {
            "name": "cursor_type",
            "type": "ImGuiMouseCursor"
          }
        ],
        "description": "Sets the desired mouse cursor shape."
      },
      {
        "name": "SetNextFrameWantCaptureMouse",
        "return_type": "void",
        "parameters": [
          {
            "name": "want_capture_mouse",
            "type": "bool"
          }
        ],
        "description": "Overrides the io.WantCaptureMouse flag for the next frame."
      },
      {
        "name": "GetClipboardText",
        "return_type": "const char*",
        "parameters": [],
        "description": "Returns the text currently in the clipboard."
      },
      {
        "name": "SetClipboardText",
        "return_type": "void",
        "parameters": [
          {
            "name": "text",
            "type": "const char*"
          }
        ],
        "description": "Sets the text in the clipboard."
      },
      {
        "name": "LoadIniSettingsFromDisk",
        "return_type": "void",
        "parameters": [
          {
            "name": "ini_filename",
            "type": "const char*"
          }
        ],
        "description": "Loads ini settings from the specified file."
      },
      {
        "name": "LoadIniSettingsFromMemory",
        "return_type": "void",
        "parameters": [
          {
            "name": "ini_data",
            "type": "const char*"
          },
          {
            "name": "ini_size",
            "type": "size_t",
            "default": "0"
          }
        ],
        "description": "Loads ini settings from the specified memory buffer."
      },
      {
        "name": "SaveIniSettingsToDisk",
        "return_type": "void",
        "parameters": [
          {
            "name": "ini_filename",
            "type": "const char*"
          }
        ],
        "description": "Saves ini settings to the specified file."
      },
      {
        "name": "SaveIniSettingsToMemory",
        "return_type": "const char*",
        "parameters": [
          {
            "name": "out_ini_size",
            "type": "size_t*",
            "default": "NULL"
          }
        ],
        "description": "Returns a zero-terminated string with the ini data which you can save manually."
      },
      {
        "name": "DebugTextEncoding",
        "return_type": "void",
        "parameters": [
          {
            "name": "text",
            "type": "const char*"
          }
        ],
        "description": "Debugs the text encoding."
      },
      {
        "name": "DebugFlashStyleColor",
        "return_type": "void",
        "parameters": [
          {
            "name": "idx",
            "type": "ImGuiCol"
          }
        ],
        "description": "Debugs by flashing a style color."
      },
      {
        "name": "DebugStartItemPicker",
        "return_type": "void",
        "parameters": [],
        "description": "Starts the item picker for debugging."
      },
      {
        "name": "DebugCheckVersionAndDataLayout",
        "return_type": "bool",
        "parameters": [
          {
            "name": "version_str",
            "type": "const char*"
          },
          {
            "name": "sz_io",
            "type": "size_t"
          },
          {
            "name": "sz_style",
            "type": "size_t"
          },
          {
            "name": "sz_vec2",
            "type": "size_t"
          },
          {
            "name": "sz_vec4",
            "type": "size_t"
          },
          {
            "name": "sz_drawvert",
            "type": "size_t"
          },
          {
            "name": "sz_drawidx",
            "type": "size_t"
          }
        ],
        "description": "Checks the version and data layout for debugging."
      },
      {
        "name": "SetAllocatorFunctions",
        "return_type": "void",
        "parameters": [
          {
            "name": "alloc_func",
            "type": "ImGuiMemAllocFunc"
          },
          {
            "name": "free_func",
            "type": "ImGuiMemFreeFunc"
          },
          {
            "name": "user_data",
            "type": "void*",
            "default": "NULL"
          }
        ],
        "description": "Sets the custom memory allocator functions."
      },
      {
        "name": "GetAllocatorFunctions",
        "return_type": "void",
        "parameters": [
          {
            "name": "p_alloc_func",
            "type": "ImGuiMemAllocFunc*"
          },
          {
            "name": "p_free_func",
            "type": "ImGuiMemFreeFunc*"
          },
          {
            "name": "p_user_data",
            "type": "void**"
          }
        ],
        "description": "Gets the current memory allocator functions."
      },
      {
        "name": "MemAlloc",
        "return_type": "void*",
        "parameters": [
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "description": "Allocates memory using the custom allocator."
      },
      {
        "name": "MemFree",
        "return_type": "void",
        "parameters": [
          {
            "name": "ptr",
            "type": "void*"
          }
        ],
        "description": "Frees memory using the custom allocator."
      }
    ]
  },
  "enums": [
    {
      "name": "ImGuiMultiSelectFlags_",
      "values": [
        {
          "name": "ImGuiMultiSelectFlags_None",
          "value": 0,
          "description": "No flags."
        },
        {
          "name": "ImGuiMultiSelectFlags_SingleSelect",
          "value": 1,
          "description": "Disable selecting more than one item. This allows single-selection code to share the same logic. It essentially disables the main purpose of BeginMultiSelect() though."
        },
        {
          "name": "ImGuiMultiSelectFlags_NoSelectAll",
          "value": 2,
          "description": "Disable CTRL+A shortcut to select all."
        },
        {
          "name": "ImGuiMultiSelectFlags_NoRangeSelect",
          "value": 4,
          "description": "Disable Shift+selection mouse/keyboard support. Useful for unordered 2D selection. Ensures contiguous SetRange requests are not combined into one."
        },
        {
          "name": "ImGuiMultiSelectFlags_NoAutoSelect",
          "value": 8,
          "description": "Disable selecting items when navigating. Useful for supporting range-select in a list of checkboxes."
        },
        {
          "name": "ImGuiMultiSelectFlags_NoAutoClear",
          "value": 16,
          "description": "Disable clearing selection when navigating or selecting another item. Generally used with ImGuiMultiSelectFlags_NoAutoSelect."
        },
        {
          "name": "ImGuiMultiSelectFlags_NoAutoClearOnReselect",
          "value": 32,
          "description": "Disable clearing selection when clicking/selecting an already selected item."
        },
        {
          "name": "ImGuiMultiSelectFlags_BoxSelect1d",
          "value": 64,
          "description": "Enable box-selection with same width and same x position items. Box-selection works better with a bit of spacing between items' hit-boxes."
        },
        {
          "name": "ImGuiMultiSelectFlags_BoxSelect2d",
          "value": 128,
          "description": "Enable box-selection with varying width or varying x position items support. Alters clipping logic, so horizontal movements update selection of normally clipped items."
        },
        {
          "name": "ImGuiMultiSelectFlags_BoxSelectNoScroll",
          "value": 256,
          "description": "Disable scrolling when box-selecting near the edges of the scope."
        },
        {
          "name": "ImGuiMultiSelectFlags_ClearOnEscape",
          "value": 512,
          "description": "Clear selection when pressing Escape while the scope is focused."
        },
        {
          "name": "ImGuiMultiSelectFlags_ClearOnClickVoid",
          "value": 1024,
          "description": "Clear selection when clicking on an empty location within the scope."
        },
        {
          "name": "ImGuiMultiSelectFlags_ScopeWindow",
          "value": 2048,
          "description": "Scope for _BoxSelect and _ClearOnClickVoid is the whole window (Default)."
        },
        {
          "name": "ImGuiMultiSelectFlags_ScopeRect",
          "value": 4096,
          "description": "Scope for _BoxSelect and _ClearOnClickVoid is the rectangle encompassing BeginMultiSelect()/EndMultiSelect()."
        },
        {
          "name": "ImGuiMultiSelectFlags_SelectOnClick",
          "value": 8192,
          "description": "Apply selection on mouse down when clicking on an unselected item. (Default)"
        },
        {
          "name": "ImGuiMultiSelectFlags_SelectOnClickRelease",
          "value": 16384,
          "description": "Apply selection on mouse release when clicking an unselected item. Allows dragging an unselected item without altering selection."
        },
        {
          "name": "ImGuiMultiSelectFlags_NavWrapX",
          "value": 65536,
          "description": "[Temporary] Enable navigation wrapping on the X axis. Provided as a convenience until a more general Nav API is available."
        }
      ]
    },
    {
      "name": "ImGuiWindowFlags_",
      "values": [
        {
          "name": "ImGuiWindowFlags_None",
          "value": 0,
          "description": "No window flags."
        },
        {
          "name": "ImGuiWindowFlags_NoTitleBar",
          "value": "1 << 0",
          "description": "Disable title-bar."
        },
        {
          "name": "ImGuiWindowFlags_NoResize",
          "value": "1 << 1",
          "description": "Disable user resizing with the lower-right grip."
        },
        {
          "name": "ImGuiWindowFlags_NoMove",
          "value": "1 << 2",
          "description": "Disable user moving the window."
        },
        {
          "name": "ImGuiWindowFlags_NoScrollbar",
          "value": "1 << 3",
          "description": "Disable scrollbars (window can still scroll with mouse or programmatically)."
        },
        {
          "name": "ImGuiWindowFlags_NoScrollWithMouse",
          "value": "1 << 4",
          "description": "Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set."
        },
        {
          "name": "ImGuiWindowFlags_NoCollapse",
          "value": "1 << 5",
          "description": "Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node)."
        },
        {
          "name": "ImGuiWindowFlags_AlwaysAutoResize",
          "value": "1 << 6",
          "description": "Resize every window to its content every frame."
        },
        {
          "name": "ImGuiWindowFlags_NoBackground",
          "value": "1 << 7",
          "description": "Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f)."
        },
        {
          "name": "ImGuiWindowFlags_NoSavedSettings",
          "value": "1 << 8",
          "description": "Never load/save settings in .ini file."
        },
        {
          "name": "ImGuiWindowFlags_NoMouseInputs",
          "value": "1 << 9",
          "description": "Disable catching mouse, hovering test with pass through."
        },
        {
          "name": "ImGuiWindowFlags_MenuBar",
          "value": "1 << 10",
          "description": "Has a menu-bar."
        },
        {
          "name": "ImGuiWindowFlags_HorizontalScrollbar",
          "value": "1 << 11",
          "description": "Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width."
        },
        {
          "name": "ImGuiWindowFlags_NoFocusOnAppearing",
          "value": "1 << 12",
          "description": "Disable taking focus when transitioning from hidden to visible state."
        },
        {
          "name": "ImGuiWindowFlags_NoBringToFrontOnFocus",
          "value": "1 << 13",
          "description": "Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)."
        },
        {
          "name": "ImGuiWindowFlags_AlwaysVerticalScrollbar",
          "value": "1 << 14",
          "description": "Always show vertical scrollbar (even if ContentSize.y < Size.y)."
        },
        {
          "name": "ImGuiWindowFlags_AlwaysHorizontalScrollbar",
          "value": "1 << 15",
          "description": "Always show horizontal scrollbar (even if ContentSize.x < Size.x)."
        },
        {
          "name": "ImGuiWindowFlags_NoNavInputs",
          "value": "1 << 16",
          "description": "No gamepad/keyboard navigation within the window."
        },
        {
          "name": "ImGuiWindowFlags_NoNavFocus",
          "value": "1 << 17",
          "description": "No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)."
        },
        {
          "name": "ImGuiWindowFlags_UnsavedDocument",
          "value": "1 << 18",
          "description": "Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed."
        },
        {
          "name": "ImGuiWindowFlags_NoNav",
          "value": "ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus",
          "description": "Shortcut for no navigation inputs or focus."
        },
        {
          "name": "ImGuiWindowFlags_NoDecoration",
          "value": "ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse",
          "description": "Shortcut for no decorations (title bar, resize, scrollbar, collapse)."
        },
        {
          "name": "ImGuiWindowFlags_NoInputs",
          "value": "ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus",
          "description": "Shortcut for no inputs (mouse and navigation)."
        },
        {
          "name": "ImGuiWindowFlags_ChildWindow",
          "value": "1 << 24",
          "description": "Don't use! For internal use by BeginChild()."
        },
        {
          "name": "ImGuiWindowFlags_Tooltip",
          "value": "1 << 25",
          "description": "Don't use! For internal use by BeginTooltip()."
        },
        {
          "name": "ImGuiWindowFlags_Popup",
          "value": "1 << 26",
          "description": "Don't use! For internal use by BeginPopup()."
        },
        {
          "name": "ImGuiWindowFlags_Modal",
          "value": "1 << 27",
          "description": "Don't use! For internal use by BeginPopupModal()."
        },
        {
          "name": "ImGuiWindowFlags_ChildMenu",
          "value": "1 << 28",
          "description": "Don't use! For internal use by BeginMenu()."
        },
        {
          "name": "ImGuiWindowFlags_AlwaysUseWindowPadding",
          "value": "1 << 30",
          "description": "Obsoleted in 1.90.0: Use ImGuiChildFlags_AlwaysUseWindowPadding in BeginChild() call."
        },
        {
          "name": "ImGuiWindowFlags_NavFlattened",
          "value": "1 << 31",
          "description": "Obsoleted in 1.90.9: Use ImGuiChildFlags_NavFlattened in BeginChild() call."
        }
      ]
    },
    {
      "name": "ImGuiChildFlags_",
      "values": [
        {
          "name": "ImGuiChildFlags_None",
          "value": 0,
          "description": "No child window flags."
        },
        {
          "name": "ImGuiChildFlags_Border",
          "value": "1 << 0",
          "description": "Show an outer border and enable WindowPadding. (IMPORTANT: this is always == 1 == true for legacy reason)."
        },
        {
          "name": "ImGuiChildFlags_AlwaysUseWindowPadding",
          "value": "1 << 1",
          "description": "Pad with style.WindowPadding even if no border is drawn (no padding by default for non-bordered child windows because it makes more sense)."
        },
        {
          "name": "ImGuiChildFlags_ResizeX",
          "value": "1 << 2",
          "description": "Allow resize from right border (layout direction). Enable .ini saving (unless ImGuiWindowFlags_NoSavedSettings passed to window flags)."
        },
        {
          "name": "ImGuiChildFlags_ResizeY",
          "value": "1 << 3",
          "description": "Allow resize from bottom border (layout direction)."
        },
        {
          "name": "ImGuiChildFlags_AutoResizeX",
          "value": "1 << 4",
          "description": "Enable auto-resizing width. Read 'IMPORTANT: Size measurement' details above."
        },
        {
          "name": "ImGuiChildFlags_AutoResizeY",
          "value": "1 << 5",
          "description": "Enable auto-resizing height. Read 'IMPORTANT: Size measurement' details above."
        },
        {
          "name": "ImGuiChildFlags_AlwaysAutoResize",
          "value": "1 << 6",
          "description": "Combined with AutoResizeX/AutoResizeY. Always measure size even when child is hidden, always return true, always disable clipping optimization! NOT RECOMMENDED."
        },
        {
          "name": "ImGuiChildFlags_FrameStyle",
          "value": "1 << 7",
          "description": "Style the child window like a framed item: use FrameBg, FrameRounding, FrameBorderSize, FramePadding instead of ChildBg, ChildRounding, ChildBorderSize, WindowPadding."
        },
        {
          "name": "ImGuiChildFlags_NavFlattened",
          "value": "1 << 8",
          "description": "[BETA] Share focus scope, allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows."
        }
      ]
    },
    {
      "name": "ImGuiItemFlags_",
      "values": [
        {
          "name": "ImGuiItemFlags_None",
          "value": 0,
          "description": "(Default) No item flags."
        },
        {
          "name": "ImGuiItemFlags_NoTabStop",
          "value": "1 << 0",
          "description": "Disable keyboard tabbing. This is a 'lighter' version of ImGuiItemFlags_NoNav."
        },
        {
          "name": "ImGuiItemFlags_NoNav",
          "value": "1 << 1",
          "description": "Disable any form of focusing (keyboard/gamepad directional navigation and SetKeyboardFocusHere() calls)."
        },
        {
          "name": "ImGuiItemFlags_NoNavDefaultFocus",
          "value": "1 << 2",
          "description": "Disable item being a candidate for default focus (e.g. used by title bar items)."
        },
        {
          "name": "ImGuiItemFlags_ButtonRepeat",
          "value": "1 << 3",
          "description": "Any button-like behavior will have repeat mode enabled (based on io.KeyRepeatDelay and io.KeyRepeatRate values)."
        },
        {
          "name": "ImGuiItemFlags_AutoClosePopups",
          "value": "1 << 4",
          "description": "MenuItem()/Selectable() automatically close their parent popup window."
        }
      ]
    },
    {
      "name": "ImGuiInputTextFlags_",
      "values": [
        {
          "name": "ImGuiInputTextFlags_None",
          "value": 0,
          "description": "No input text flags."
        },
        {
          "name": "ImGuiInputTextFlags_CharsDecimal",
          "value": "1 << 0",
          "description": "Allow 0123456789.+-*/"
        },
        {
          "name": "ImGuiInputTextFlags_CharsHexadecimal",
          "value": "1 << 1",
          "description": "Allow 0123456789ABCDEFabcdef"
        },
        {
          "name": "ImGuiInputTextFlags_CharsScientific",
          "value": "1 << 2",
          "description": "Allow 0123456789.+-*/eE (Scientific notation input)"
        },
        {
          "name": "ImGuiInputTextFlags_CharsUppercase",
          "value": "1 << 3",
          "description": "Turn a..z into A..Z"
        },
        {
          "name": "ImGuiInputTextFlags_CharsNoBlank",
          "value": "1 << 4",
          "description": "Filter out spaces, tabs"
        },
        {
          "name": "ImGuiInputTextFlags_AllowTabInput",
          "value": "1 << 5",
          "description": "Pressing TAB inputs a '\\t' character into the text field"
        },
        {
          "name": "ImGuiInputTextFlags_EnterReturnsTrue",
          "value": "1 << 6",
          "description": "Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function."
        },
        {
          "name": "ImGuiInputTextFlags_EscapeClearsAll",
          "value": "1 << 7",
          "description": "Escape key clears content if not empty, and deactivates otherwise (contrast to default behavior of Escape to revert)."
        },
        {
          "name": "ImGuiInputTextFlags_CtrlEnterForNewLine",
          "value": "1 << 8",
          "description": "In multi-line mode, validate with Enter, add new line with Ctrl+Enter (default is opposite: validate with Ctrl+Enter, add line with Enter)."
        },
        {
          "name": "ImGuiInputTextFlags_ReadOnly",
          "value": "1 << 9",
          "description": "Read-only mode"
        },
        {
          "name": "ImGuiInputTextFlags_Password",
          "value": "1 << 10",
          "description": "Password mode, display all characters as '*', disable copy"
        },
        {
          "name": "ImGuiInputTextFlags_AlwaysOverwrite",
          "value": "1 << 11",
          "description": "Overwrite mode"
        },
        {
          "name": "ImGuiInputTextFlags_AutoSelectAll",
          "value": "1 << 12",
          "description": "Select entire text when first taking mouse focus"
        },
        {
          "name": "ImGuiInputTextFlags_ParseEmptyRefVal",
          "value": "1 << 13",
          "description": "InputFloat(), InputInt(), InputScalar() etc. only: parse empty string as zero value."
        },
        {
          "name": "ImGuiInputTextFlags_DisplayEmptyRefVal",
          "value": "1 << 14",
          "description": "InputFloat(), InputInt(), InputScalar() etc. only: when value is zero, do not display it. Generally used with ImGuiInputTextFlags_ParseEmptyRefVal."
        },
        {
          "name": "ImGuiInputTextFlags_NoHorizontalScroll",
          "value": "1 << 15",
          "description": "Disable following the cursor horizontally"
        },
        {
          "name": "ImGuiInputTextFlags_NoUndoRedo",
          "value": "1 << 16",
          "description": "Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID()."
        },
        {
          "name": "ImGuiInputTextFlags_CallbackCompletion",
          "value": "1 << 17",
          "description": "Callback on pressing TAB (for completion handling)"
        },
        {
          "name": "ImGuiInputTextFlags_CallbackHistory",
          "value": "1 << 18",
          "description": "Callback on pressing Up/Down arrows (for history handling)"
        },
        {
          "name": "ImGuiInputTextFlags_CallbackAlways",
          "value": "1 << 19",
          "description": "Callback on each iteration. User code may query cursor position, modify text buffer."
        },
        {
          "name": "ImGuiInputTextFlags_CallbackCharFilter",
          "value": "1 << 20",
          "description": "Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard."
        },
        {
          "name": "ImGuiInputTextFlags_CallbackResize",
          "value": "1 << 21",
          "description": "Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it."
        },
        {
          "name": "ImGuiInputTextFlags_CallbackEdit",
          "value": "1 << 22",
          "description": "Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)"
        }
      ]
    },
    {
      "name": "ImGuiTreeNodeFlags_",
      "values": [
        {
          "name": "ImGuiTreeNodeFlags_None",
          "value": 0,
          "description": "No tree node flags."
        },
        {
          "name": "ImGuiTreeNodeFlags_Selected",
          "value": "1 << 0",
          "description": "Draw as selected."
        },
        {
          "name": "ImGuiTreeNodeFlags_Framed",
          "value": "1 << 1",
          "description": "Draw frame with background (e.g., for CollapsingHeader)."
        },
        {
          "name": "ImGuiTreeNodeFlags_AllowOverlap",
          "value": "1 << 2",
          "description": "Hit testing to allow subsequent widgets to overlap this one."
        },
        {
          "name": "ImGuiTreeNodeFlags_NoTreePushOnOpen",
          "value": "1 << 3",
          "description": "Don't do a TreePush() when open (e.g., for CollapsingHeader) = no extra indent nor pushing on ID stack."
        },
        {
          "name": "ImGuiTreeNodeFlags_NoAutoOpenOnLog",
          "value": "1 << 4",
          "description": "Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)."
        },
        {
          "name": "ImGuiTreeNodeFlags_DefaultOpen",
          "value": "1 << 5",
          "description": "Default node to be open."
        },
        {
          "name": "ImGuiTreeNodeFlags_OpenOnDoubleClick",
          "value": "1 << 6",
          "description": "Need double-click to open node."
        },
        {
          "name": "ImGuiTreeNodeFlags_OpenOnArrow",
          "value": "1 << 7",
          "description": "Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open."
        },
        {
          "name": "ImGuiTreeNodeFlags_Leaf",
          "value": "1 << 8",
          "description": "No collapsing, no arrow (use as a convenience for leaf nodes)."
        },
        {
          "name": "ImGuiTreeNodeFlags_Bullet",
          "value": "1 << 9",
          "description": "Display a bullet instead of arrow. IMPORTANT: node can still be marked open/close if you don't set the _Leaf flag!"
        },
        {
          "name": "ImGuiTreeNodeFlags_FramePadding",
          "value": "1 << 10",
          "description": "Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding() before the node."
        },
        {
          "name": "ImGuiTreeNodeFlags_SpanAvailWidth",
          "value": "1 << 11",
          "description": "Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line without using AllowOverlap mode."
        },
        {
          "name": "ImGuiTreeNodeFlags_SpanFullWidth",
          "value": "1 << 12",
          "description": "Extend hit box to the left-most and right-most edges (cover the indent area)."
        },
        {
          "name": "ImGuiTreeNodeFlags_SpanTextWidth",
          "value": "1 << 13",
          "description": "Narrow hit box + narrow hovering highlight, will only cover the label text."
        },
        {
          "name": "ImGuiTreeNodeFlags_SpanAllColumns",
          "value": "1 << 14",
          "description": "Frame will span all columns of its container table (text will still fit in current column)."
        },
        {
          "name": "ImGuiTreeNodeFlags_NavLeftJumpsBackHere",
          "value": "1 << 15",
          "description": "(WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)."
        },
        {
          "name": "ImGuiTreeNodeFlags_CollapsingHeader",
          "value": "ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog",
          "description": "Combined flags for a collapsing header (framed, no tree push on open, no auto-open on log)."
        },
        {
          "name": "ImGuiTreeNodeFlags_AllowItemOverlap",
          "value": "ImGuiTreeNodeFlags_AllowOverlap",
          "description": "Renamed in 1.89.7: Allow subsequent widgets to overlap this one."
        }
      ]
    },
    {
      "name": "ImGuiPopupFlags_",
      "values": [
        {
          "name": "ImGuiPopupFlags_None",
          "value": 0,
          "description": "No popup flags."
        },
        {
          "name": "ImGuiPopupFlags_MouseButtonLeft",
          "value": 0,
          "description": "For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be 0 (same as ImGuiMouseButton_Left)."
        },
        {
          "name": "ImGuiPopupFlags_MouseButtonRight",
          "value": 1,
          "description": "For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be 1 (same as ImGuiMouseButton_Right)."
        },
        {
          "name": "ImGuiPopupFlags_MouseButtonMiddle",
          "value": 2,
          "description": "For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be 2 (same as ImGuiMouseButton_Middle)."
        },
        {
          "name": "ImGuiPopupFlags_MouseButtonMask_",
          "value": "0x1F",
          "description": "Mask for mouse button flags."
        },
        {
          "name": "ImGuiPopupFlags_MouseButtonDefault_",
          "value": 1,
          "description": "Default mouse button flag for popups."
        },
        {
          "name": "ImGuiPopupFlags_NoReopen",
          "value": "1 << 5",
          "description": "For OpenPopup*(), BeginPopupContext*(): don't reopen the same popup if already open (won't reposition, won't reinitialize navigation)."
        },
        {
          "name": "ImGuiPopupFlags_NoOpenOverExistingPopup",
          "value": "1 << 7",
          "description": "For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack."
        },
        {
          "name": "ImGuiPopupFlags_NoOpenOverItems",
          "value": "1 << 8",
          "description": "For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space."
        },
        {
          "name": "ImGuiPopupFlags_AnyPopupId",
          "value": "1 << 10",
          "description": "For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup."
        },
        {
          "name": "ImGuiPopupFlags_AnyPopupLevel",
          "value": "1 << 11",
          "description": "For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)."
        },
        {
          "name": "ImGuiPopupFlags_AnyPopup",
          "value": "ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel",
          "description": "Combination of AnyPopupId and AnyPopupLevel flags for testing any popup at any level."
        }
      ]
    },
    {
      "name": "ImGuiSelectableFlags_",
      "values": [
        {
          "name": "ImGuiSelectableFlags_None",
          "value": 0,
          "description": "No selectable flags."
        },
        {
          "name": "ImGuiSelectableFlags_NoAutoClosePopups",
          "value": "1 << 0",
          "description": "Clicking this doesn't close parent popup window (overrides ImGuiItemFlags_AutoClosePopups)."
        },
        {
          "name": "ImGuiSelectableFlags_SpanAllColumns",
          "value": "1 << 1",
          "description": "Frame will span all columns of its container table (text will still fit in current column)."
        },
        {
          "name": "ImGuiSelectableFlags_AllowDoubleClick",
          "value": "1 << 2",
          "description": "Generate press events on double clicks too."
        },
        {
          "name": "ImGuiSelectableFlags_Disabled",
          "value": "1 << 3",
          "description": "Cannot be selected, display grayed out text."
        },
        {
          "name": "ImGuiSelectableFlags_AllowOverlap",
          "value": "1 << 4",
          "description": "(WIP) Hit testing to allow subsequent widgets to overlap this one."
        },
        {
          "name": "ImGuiSelectableFlags_Highlight",
          "value": "1 << 5",
          "description": "Make the item be displayed as if it is hovered."
        },
        {
          "name": "ImGuiSelectableFlags_DontClosePopups",
          "value": "ImGuiSelectableFlags_NoAutoClosePopups",
          "description": "Renamed in 1.91.0: Don't close popups."
        },
        {
          "name": "ImGuiSelectableFlags_AllowItemOverlap",
          "value": "ImGuiSelectableFlags_AllowOverlap",
          "description": "Renamed in 1.89.7: Allow item overlap."
        }
      ]
    },
    {
      "name": "ImGuiComboFlags_",
      "values": [
        {
          "name": "ImGuiComboFlags_None",
          "value": 0,
          "description": "No combo flags."
        },
        {
          "name": "ImGuiComboFlags_PopupAlignLeft",
          "value": "1 << 0",
          "description": "Align the popup toward the left by default."
        },
        {
          "name": "ImGuiComboFlags_HeightSmall",
          "value": "1 << 1",
          "description": "Max ~4 items visible. Tip: Use SetNextWindowSizeConstraints() prior to BeginCombo() for a specific size."
        },
        {
          "name": "ImGuiComboFlags_HeightRegular",
          "value": "1 << 2",
          "description": "Max ~8 items visible (default)."
        },
        {
          "name": "ImGuiComboFlags_HeightLarge",
          "value": "1 << 3",
          "description": "Max ~20 items visible."
        },
        {
          "name": "ImGuiComboFlags_HeightLargest",
          "value": "1 << 4",
          "description": "As many fitting items as possible."
        },
        {
          "name": "ImGuiComboFlags_NoArrowButton",
          "value": "1 << 5",
          "description": "Display on the preview box without the square arrow button."
        },
        {
          "name": "ImGuiComboFlags_NoPreview",
          "value": "1 << 6",
          "description": "Display only a square arrow button."
        },
        {
          "name": "ImGuiComboFlags_WidthFitPreview",
          "value": "1 << 7",
          "description": "Width dynamically calculated from preview contents."
        },
        {
          "name": "ImGuiComboFlags_HeightMask_",
          "value": "ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest",
          "description": "Combination of all height flags."
        }
      ]
    },
    {
      "name": "ImGuiTabBarFlags_",
      "values": [
        {
          "name": "ImGuiTabBarFlags_None",
          "value": 0,
          "description": "No tab bar flags."
        },
        {
          "name": "ImGuiTabBarFlags_Reorderable",
          "value": "1 << 0",
          "description": "Allow manually dragging tabs to re-order them. New tabs are appended at the end of the list."
        },
        {
          "name": "ImGuiTabBarFlags_AutoSelectNewTabs",
          "value": "1 << 1",
          "description": "Automatically select new tabs when they appear."
        },
        {
          "name": "ImGuiTabBarFlags_TabListPopupButton",
          "value": "1 << 2",
          "description": "Disable buttons to open the tab list popup."
        },
        {
          "name": "ImGuiTabBarFlags_NoCloseWithMiddleMouseButton",
          "value": "1 << 3",
          "description": "Disable closing tabs with the middle mouse button. You may handle this manually."
        },
        {
          "name": "ImGuiTabBarFlags_NoTabListScrollingButtons",
          "value": "1 << 4",
          "description": "Disable scrolling buttons when tabs don't fit."
        },
        {
          "name": "ImGuiTabBarFlags_NoTooltip",
          "value": "1 << 5",
          "description": "Disable tooltips when hovering a tab."
        },
        {
          "name": "ImGuiTabBarFlags_DrawSelectedOverline",
          "value": "1 << 6",
          "description": "Draw selected overline markers over the selected tab."
        },
        {
          "name": "ImGuiTabBarFlags_FittingPolicyResizeDown",
          "value": "1 << 7",
          "description": "Resize tabs when they don't fit."
        },
        {
          "name": "ImGuiTabBarFlags_FittingPolicyScroll",
          "value": "1 << 8",
          "description": "Add scroll buttons when tabs don't fit."
        },
        {
          "name": "ImGuiTabBarFlags_FittingPolicyMask_",
          "value": "ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll",
          "description": "Mask for fitting policy flags."
        },
        {
          "name": "ImGuiTabBarFlags_FittingPolicyDefault_",
          "value": "ImGuiTabBarFlags_FittingPolicyResizeDown",
          "description": "Default fitting policy (resize down)."
        }
      ]
    },
    {
      "name": "ImGuiTabItemFlags_",
      "values": [
        {
          "name": "ImGuiTabItemFlags_None",
          "value": 0,
          "description": "No tab item flags."
        },
        {
          "name": "ImGuiTabItemFlags_UnsavedDocument",
          "value": "1 << 0",
          "description": "Display a dot next to the title and set ImGuiTabItemFlags_NoAssumedClosure."
        },
        {
          "name": "ImGuiTabItemFlags_SetSelected",
          "value": "1 << 1",
          "description": "Programmatically make the tab selected when calling BeginTabItem()."
        },
        {
          "name": "ImGuiTabItemFlags_NoCloseWithMiddleMouseButton",
          "value": "1 << 2",
          "description": "Disable behavior of closing tabs with middle mouse button. You may handle this manually."
        },
        {
          "name": "ImGuiTabItemFlags_NoPushId",
          "value": "1 << 3",
          "description": "Don't call PushID()/PopID() on BeginTabItem()/EndTabItem()."
        },
        {
          "name": "ImGuiTabItemFlags_NoTooltip",
          "value": "1 << 4",
          "description": "Disable tooltip for the given tab."
        },
        {
          "name": "ImGuiTabItemFlags_NoReorder",
          "value": "1 << 5",
          "description": "Disable reordering this tab or having another tab cross over this tab."
        },
        {
          "name": "ImGuiTabItemFlags_Leading",
          "value": "1 << 6",
          "description": "Enforce the tab position to the left of the tab bar."
        },
        {
          "name": "ImGuiTabItemFlags_Trailing",
          "value": "1 << 7",
          "description": "Enforce the tab position to the right of the tab bar."
        },
        {
          "name": "ImGuiTabItemFlags_NoAssumedClosure",
          "value": "1 << 8",
          "description": "Tab is selected when trying to close, closure is not immediately assumed."
        }
      ]
    },
    {
      "name": "ImGuiFocusedFlags_",
      "values": [
        {
          "name": "ImGuiFocusedFlags_None",
          "value": 0,
          "description": "No focused flags."
        },
        {
          "name": "ImGuiFocusedFlags_ChildWindows",
          "value": "1 << 0",
          "description": "Return true if any children of the window is focused."
        },
        {
          "name": "ImGuiFocusedFlags_RootWindow",
          "value": "1 << 1",
          "description": "Test from root window (top most parent of the current hierarchy)."
        },
        {
          "name": "ImGuiFocusedFlags_AnyWindow",
          "value": "1 << 2",
          "description": "Return true if any window is focused. Do NOT use for low-level input dispatching, use 'io.WantCaptureMouse' instead."
        },
        {
          "name": "ImGuiFocusedFlags_NoPopupHierarchy",
          "value": "1 << 3",
          "description": "Do not consider popup hierarchy when used with _ChildWindows or _RootWindow."
        },
        {
          "name": "ImGuiFocusedFlags_RootAndChildWindows",
          "value": "ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows",
          "description": "Test from root and child windows."
        }
      ]
    },
    {
      "name": "ImGuiHoveredFlags_",
      "values": [
        {
          "name": "ImGuiHoveredFlags_None",
          "value": 0,
          "description": "Return true if directly over the item/window, not obstructed by another window or active popup."
        },
        {
          "name": "ImGuiHoveredFlags_ChildWindows",
          "value": "1 << 0",
          "description": "IsWindowHovered() only: Return true if any children of the window is hovered."
        },
        {
          "name": "ImGuiHoveredFlags_RootWindow",
          "value": "1 << 1",
          "description": "IsWindowHovered() only: Test from root window."
        },
        {
          "name": "ImGuiHoveredFlags_AnyWindow",
          "value": "1 << 2",
          "description": "IsWindowHovered() only: Return true if any window is hovered."
        },
        {
          "name": "ImGuiHoveredFlags_NoPopupHierarchy",
          "value": "1 << 3",
          "description": "IsWindowHovered() only: Do not consider popup hierarchy."
        },
        {
          "name": "ImGuiHoveredFlags_AllowWhenBlockedByPopup",
          "value": "1 << 5",
          "description": "Return true even if a popup window is normally blocking access to this item/window."
        },
        {
          "name": "ImGuiHoveredFlags_AllowWhenBlockedByActiveItem",
          "value": "1 << 7",
          "description": "Return true even if an active item is blocking access. Useful for Drag and Drop patterns."
        },
        {
          "name": "ImGuiHoveredFlags_AllowWhenOverlappedByItem",
          "value": "1 << 8",
          "description": "IsItemHovered() only: Return true even if the item uses AllowOverlap mode and is overlapped by another hoverable item."
        },
        {
          "name": "ImGuiHoveredFlags_AllowWhenOverlappedByWindow",
          "value": "1 << 9",
          "description": "IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window."
        },
        {
          "name": "ImGuiHoveredFlags_AllowWhenDisabled",
          "value": "1 << 10",
          "description": "IsItemHovered() only: Return true even if the item is disabled."
        },
        {
          "name": "ImGuiHoveredFlags_NoNavOverride",
          "value": "1 << 11",
          "description": "IsItemHovered() only: Disable using gamepad/keyboard navigation state when active, always query mouse."
        },
        {
          "name": "ImGuiHoveredFlags_AllowWhenOverlapped",
          "value": "ImGuiHoveredFlags_AllowWhenOverlappedByItem | ImGuiHoveredFlags_AllowWhenOverlappedByWindow",
          "description": "Combination of AllowWhenOverlappedByItem and AllowWhenOverlappedByWindow flags."
        },
        {
          "name": "ImGuiHoveredFlags_RectOnly",
          "value": "ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped",
          "description": "Combination of flags for hit testing only."
        },
        {
          "name": "ImGuiHoveredFlags_RootAndChildWindows",
          "value": "ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows",
          "description": "Combination of RootWindow and ChildWindows flags."
        },
        {
          "name": "ImGuiHoveredFlags_ForTooltip",
          "value": "1 << 12",
          "description": "Shortcut for standard flags when using IsItemHovered() + SetTooltip() sequence."
        },
        {
          "name": "ImGuiHoveredFlags_Stationary",
          "value": "1 << 13",
          "description": "Require mouse to be stationary for a period before returning true."
        },
        {
          "name": "ImGuiHoveredFlags_DelayNone",
          "value": "1 << 14",
          "description": "IsItemHovered() only: Return true immediately (default)."
        },
        {
          "name": "ImGuiHoveredFlags_DelayShort",
          "value": "1 << 15",
          "description": "IsItemHovered() only: Return true after a short delay."
        },
        {
          "name": "ImGuiHoveredFlags_DelayNormal",
          "value": "1 << 16",
          "description": "IsItemHovered() only: Return true after a normal delay."
        },
        {
          "name": "ImGuiHoveredFlags_NoSharedDelay",
          "value": "1 << 17",
          "description": "IsItemHovered() only: Disable shared delay system."
        }
      ]
    },
    {
      "name": "ImGuiDragDropFlags_",
      "values": [
        {
          "name": "ImGuiDragDropFlags_None",
          "value": 0,
          "description": "No drag and drop flags."
        },
        {
          "name": "ImGuiDragDropFlags_SourceNoPreviewTooltip",
          "value": "1 << 0",
          "description": "Disable preview tooltip. Disables the default tooltip when BeginDragDropSource is successful."
        },
        {
          "name": "ImGuiDragDropFlags_SourceNoDisableHover",
          "value": "1 << 1",
          "description": "Disable clearing hover state when dragging, so IsItemHovered() still returns true."
        },
        {
          "name": "ImGuiDragDropFlags_SourceNoHoldToOpenOthers",
          "value": "1 << 2",
          "description": "Disable the behavior that allows to open tree nodes and collapsing headers by holding over them while dragging a source item."
        },
        {
          "name": "ImGuiDragDropFlags_SourceAllowNullID",
          "value": "1 << 3",
          "description": "Allow items with no unique identifier to be used as drag source by manufacturing a temporary ID."
        },
        {
          "name": "ImGuiDragDropFlags_SourceExtern",
          "value": "1 << 4",
          "description": "External source (from outside of dear imgui), won't attempt to read current item/window info."
        },
        {
          "name": "ImGuiDragDropFlags_PayloadAutoExpire",
          "value": "1 << 5",
          "description": "Automatically expire the payload if the source ceases to be submitted."
        },
        {
          "name": "ImGuiDragDropFlags_PayloadNoCrossContext",
          "value": "1 << 6",
          "description": "Hint that the payload may not be copied outside the current dear imgui context."
        },
        {
          "name": "ImGuiDragDropFlags_PayloadNoCrossProcess",
          "value": "1 << 7",
          "description": "Hint that the payload may not be copied outside the current process."
        },
        {
          "name": "ImGuiDragDropFlags_AcceptBeforeDelivery",
          "value": "1 << 10",
          "description": "AcceptDragDropPayload() will return true even before the mouse button is released."
        },
        {
          "name": "ImGuiDragDropFlags_AcceptNoDrawDefaultRect",
          "value": "1 << 11",
          "description": "Do not draw the default highlight rectangle when hovering over the target."
        },
        {
          "name": "ImGuiDragDropFlags_AcceptNoPreviewTooltip",
          "value": "1 << 12",
          "description": "Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site."
        },
        {
          "name": "ImGuiDragDropFlags_AcceptPeekOnly",
          "value": "ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect",
          "description": "For peeking ahead and inspecting the payload before delivery."
        }
      ]
    },
    {
      "name": "ImGuiDataType_",
      "values": [
        {
          "name": "ImGuiDataType_S8",
          "description": "signed char / char (with sensible compilers)"
        },
        {
          "name": "ImGuiDataType_U8",
          "description": "unsigned char"
        },
        {
          "name": "ImGuiDataType_S16",
          "description": "short"
        },
        {
          "name": "ImGuiDataType_U16",
          "description": "unsigned short"
        },
        {
          "name": "ImGuiDataType_S32",
          "description": "int"
        },
        {
          "name": "ImGuiDataType_U32",
          "description": "unsigned int"
        },
        {
          "name": "ImGuiDataType_S64",
          "description": "long long / __int64"
        },
        {
          "name": "ImGuiDataType_U64",
          "description": "unsigned long long / unsigned __int64"
        },
        {
          "name": "ImGuiDataType_Float",
          "description": "float"
        },
        {
          "name": "ImGuiDataType_Double",
          "description": "double"
        },
        {
          "name": "ImGuiDataType_Bool",
          "description": "bool (provided for user convenience, not supported by scalar widgets)"
        },
        {
          "name": "ImGuiDataType_COUNT",
          "description": "Number of data types"
        }
      ]
    },
    {
      "name": "ImGuiDir",
      "values": [
        {
          "name": "ImGuiDir_None",
          "value": -1,
          "description": "No direction"
        },
        {
          "name": "ImGuiDir_Left",
          "value": 0,
          "description": "Left direction"
        },
        {
          "name": "ImGuiDir_Right",
          "value": 1,
          "description": "Right direction"
        },
        {
          "name": "ImGuiDir_Up",
          "value": 2,
          "description": "Up direction"
        },
        {
          "name": "ImGuiDir_Down",
          "value": 3,
          "description": "Down direction"
        },
        {
          "name": "ImGuiDir_COUNT",
          "description": "Number of directions"
        }
      ]
    },
    {
      "name": "ImGuiSortDirection",
      "values": [
        {
          "name": "ImGuiSortDirection_None",
          "value": 0,
          "description": "No sort direction"
        },
        {
          "name": "ImGuiSortDirection_Ascending",
          "value": 1,
          "description": "Ascending order (e.g., 0->9, A->Z)"
        },
        {
          "name": "ImGuiSortDirection_Descending",
          "value": 2,
          "description": "Descending order (e.g., 9->0, Z->A)"
        }
      ]
    },
    {
      "name": "ImGuiKey",
      "values": [
        {
          "name": "ImGuiKey_None",
          "value": 0,
          "description": "No key"
        },
        {
          "name": "ImGuiKey_Tab",
          "value": 512,
          "description": "Tab key"
        },
        {
          "name": "ImGuiKey_LeftArrow",
          "description": "Left arrow key"
        },
        {
          "name": "ImGuiKey_RightArrow",
          "description": "Right arrow key"
        },
        {
          "name": "ImGuiKey_UpArrow",
          "description": "Up arrow key"
        },
        {
          "name": "ImGuiKey_DownArrow",
          "description": "Down arrow key"
        },
        {
          "name": "ImGuiKey_PageUp",
          "description": "Page Up key"
        },
        {
          "name": "ImGuiKey_PageDown",
          "description": "Page Down key"
        },
        {
          "name": "ImGuiKey_Home",
          "description": "Home key"
        },
        {
          "name": "ImGuiKey_End",
          "description": "End key"
        },
        {
          "name": "ImGuiKey_Insert",
          "description": "Insert key"
        },
        {
          "name": "ImGuiKey_Delete",
          "description": "Delete key"
        },
        {
          "name": "ImGuiKey_Backspace",
          "description": "Backspace key"
        },
        {
          "name": "ImGuiKey_Space",
          "description": "Space key"
        },
        {
          "name": "ImGuiKey_Enter",
          "description": "Enter key"
        },
        {
          "name": "ImGuiKey_Escape",
          "description": "Escape key"
        },
        {
          "name": "ImGuiKey_LeftCtrl",
          "description": "Left Control key"
        },
        {
          "name": "ImGuiKey_LeftShift",
          "description": "Left Shift key"
        },
        {
          "name": "ImGuiKey_LeftAlt",
          "description": "Left Alt key"
        },
        {
          "name": "ImGuiKey_LeftSuper",
          "description": "Left Super key (Windows/Command)"
        },
        {
          "name": "ImGuiKey_RightCtrl",
          "description": "Right Control key"
        },
        {
          "name": "ImGuiKey_RightShift",
          "description": "Right Shift key"
        },
        {
          "name": "ImGuiKey_RightAlt",
          "description": "Right Alt key"
        },
        {
          "name": "ImGuiKey_RightSuper",
          "description": "Right Super key (Windows/Command)"
        },
        {
          "name": "ImGuiKey_Menu",
          "description": "Menu key"
        },
        {
          "name": "ImGuiKey_0",
          "description": "Number 0 key"
        },
        {
          "name": "ImGuiKey_1",
          "description": "Number 1 key"
        },
        {
          "name": "ImGuiKey_2",
          "description": "Number 2 key"
        },
        {
          "name": "ImGuiKey_3",
          "description": "Number 3 key"
        },
        {
          "name": "ImGuiKey_4",
          "description": "Number 4 key"
        },
        {
          "name": "ImGuiKey_5",
          "description": "Number 5 key"
        },
        {
          "name": "ImGuiKey_6",
          "description": "Number 6 key"
        },
        {
          "name": "ImGuiKey_7",
          "description": "Number 7 key"
        },
        {
          "name": "ImGuiKey_8",
          "description": "Number 8 key"
        },
        {
          "name": "ImGuiKey_9",
          "description": "Number 9 key"
        },
        {
          "name": "ImGuiKey_A",
          "description": "A key"
        },
        {
          "name": "ImGuiKey_B",
          "description": "B key"
        },
        {
          "name": "ImGuiKey_C",
          "description": "C key"
        },
        {
          "name": "ImGuiKey_D",
          "description": "D key"
        },
        {
          "name": "ImGuiKey_E",
          "description": "E key"
        },
        {
          "name": "ImGuiKey_F",
          "description": "F key"
        },
        {
          "name": "ImGuiKey_G",
          "description": "G key"
        },
        {
          "name": "ImGuiKey_H",
          "description": "H key"
        },
        {
          "name": "ImGuiKey_I",
          "description": "I key"
        },
        {
          "name": "ImGuiKey_J",
          "description": "J key"
        },
        {
          "name": "ImGuiKey_K",
          "description": "K key"
        },
        {
          "name": "ImGuiKey_L",
          "description": "L key"
        },
        {
          "name": "ImGuiKey_M",
          "description": "M key"
        },
        {
          "name": "ImGuiKey_N",
          "description": "N key"
        },
        {
          "name": "ImGuiKey_O",
          "description": "O key"
        },
        {
          "name": "ImGuiKey_P",
          "description": "P key"
        },
        {
          "name": "ImGuiKey_Q",
          "description": "Q key"
        },
        {
          "name": "ImGuiKey_R",
          "description": "R key"
        },
        {
          "name": "ImGuiKey_S",
          "description": "S key"
        },
        {
          "name": "ImGuiKey_T",
          "description": "T key"
        },
        {
          "name": "ImGuiKey_U",
          "description": "U key"
        },
        {
          "name": "ImGuiKey_V",
          "description": "V key"
        },
        {
          "name": "ImGuiKey_W",
          "description": "W key"
        },
        {
          "name": "ImGuiKey_X",
          "description": "X key"
        },
        {
          "name": "ImGuiKey_Y",
          "description": "Y key"
        },
        {
          "name": "ImGuiKey_Z",
          "description": "Z key"
        },
        {
          "name": "ImGuiKey_F1",
          "description": "F1 key"
        },
        {
          "name": "ImGuiKey_F2",
          "description": "F2 key"
        },
        {
          "name": "ImGuiKey_F3",
          "description": "F3 key"
        },
        {
          "name": "ImGuiKey_F4",
          "description": "F4 key"
        },
        {
          "name": "ImGuiKey_F5",
          "description": "F5 key"
        },
        {
          "name": "ImGuiKey_F6",
          "description": "F6 key"
        },
        {
          "name": "ImGuiKey_F7",
          "description": "F7 key"
        },
        {
          "name": "ImGuiKey_F8",
          "description": "F8 key"
        },
        {
          "name": "ImGuiKey_F9",
          "description": "F9 key"
        },
        {
          "name": "ImGuiKey_F10",
          "description": "F10 key"
        },
        {
          "name": "ImGuiKey_F11",
          "description": "F11 key"
        },
        {
          "name": "ImGuiKey_F12",
          "description": "F12 key"
        },
        {
          "name": "ImGuiKey_F13",
          "description": "F13 key"
        },
        {
          "name": "ImGuiKey_F14",
          "description": "F14 key"
        },
        {
          "name": "ImGuiKey_F15",
          "description": "F15 key"
        },
        {
          "name": "ImGuiKey_F16",
          "description": "F16 key"
        },
        {
          "name": "ImGuiKey_F17",
          "description": "F17 key"
        },
        {
          "name": "ImGuiKey_F18",
          "description": "F18 key"
        },
        {
          "name": "ImGuiKey_F19",
          "description": "F19 key"
        },
        {
          "name": "ImGuiKey_F20",
          "description": "F20 key"
        },
        {
          "name": "ImGuiKey_F21",
          "description": "F21 key"
        },
        {
          "name": "ImGuiKey_F22",
          "description": "F22 key"
        },
        {
          "name": "ImGuiKey_F23",
          "description": "F23 key"
        },
        {
          "name": "ImGuiKey_F24",
          "description": "F24 key"
        },
        {
          "name": "ImGuiKey_Apostrophe",
          "description": "Apostrophe key (')"
        },
        {
          "name": "ImGuiKey_Comma",
          "description": "Comma key (,)"
        },
        {
          "name": "ImGuiKey_Minus",
          "description": "Minus key (-)"
        },
        {
          "name": "ImGuiKey_Period",
          "description": "Period key (.)"
        },
        {
          "name": "ImGuiKey_Slash",
          "description": "Slash key (/)"
        },
        {
          "name": "ImGuiKey_Semicolon",
          "description": "Semicolon key (;)"
        },
        {
          "name": "ImGuiKey_Equal",
          "description": "Equal key (=)"
        },
        {
          "name": "ImGuiKey_LeftBracket",
          "description": "Left Bracket key ([)"
        },
        {
          "name": "ImGuiKey_Backslash",
          "description": "Backslash key (\\)"
        },
        {
          "name": "ImGuiKey_RightBracket",
          "description": "Right Bracket key (])"
        },
        {
          "name": "ImGuiKey_GraveAccent",
          "description": "Grave Accent key (`)"
        },
        {
          "name": "ImGuiKey_CapsLock",
          "description": "Caps Lock key"
        },
        {
          "name": "ImGuiKey_ScrollLock",
          "description": "Scroll Lock key"
        },
        {
          "name": "ImGuiKey_NumLock",
          "description": "Num Lock key"
        },
        {
          "name": "ImGuiKey_PrintScreen",
          "description": "Print Screen key"
        },
        {
          "name": "ImGuiKey_Pause",
          "description": "Pause key"
        },
        {
          "name": "ImGuiKey_Keypad0",
          "description": "Keypad 0"
        },
        {
          "name": "ImGuiKey_Keypad1",
          "description": "Keypad 1"
        },
        {
          "name": "ImGuiKey_Keypad2",
          "description": "Keypad 2"
        },
        {
          "name": "ImGuiKey_Keypad3",
          "description": "Keypad 3"
        },
        {
          "name": "ImGuiKey_Keypad4",
          "description": "Keypad 4"
        },
        {
          "name": "ImGuiKey_Keypad5",
          "description": "Keypad 5"
        },
        {
          "name": "ImGuiKey_Keypad6",
          "description": "Keypad 6"
        },
        {
          "name": "ImGuiKey_Keypad7",
          "description": "Keypad 7"
        },
        {
          "name": "ImGuiKey_Keypad8",
          "description": "Keypad 8"
        },
        {
          "name": "ImGuiKey_Keypad9",
          "description": "Keypad 9"
        },
        {
          "name": "ImGuiKey_KeypadDecimal",
          "description": "Keypad Decimal"
        },
        {
          "name": "ImGuiKey_KeypadDivide",
          "description": "Keypad Divide"
        },
        {
          "name": "ImGuiKey_KeypadMultiply",
          "description": "Keypad Multiply"
        },
        {
          "name": "ImGuiKey_KeypadSubtract",
          "description": "Keypad Subtract"
        },
        {
          "name": "ImGuiKey_KeypadAdd",
          "description": "Keypad Add"
        },
        {
          "name": "ImGuiKey_KeypadEnter",
          "description": "Keypad Enter"
        },
        {
          "name": "ImGuiKey_KeypadEqual",
          "description": "Keypad Equal"
        },
        {
          "name": "ImGuiKey_AppBack",
          "description": "App Back key (Browser Back)"
        },
        {
          "name": "ImGuiKey_AppForward",
          "description": "App Forward key"
        },
        {
          "name": "ImGuiKey_GamepadStart",
          "description": "Gamepad Start (Menu on Xbox, + on Switch, Start/Options on PS)"
        },
        {
          "name": "ImGuiKey_GamepadBack",
          "description": "Gamepad Back (View on Xbox, - on Switch, Share on PS)"
        },
        {
          "name": "ImGuiKey_GamepadFaceLeft",
          "description": "Gamepad Face Left (X on Xbox, Y on Switch, Square on PS)"
        },
        {
          "name": "ImGuiKey_GamepadFaceRight",
          "description": "Gamepad Face Right (B on Xbox, A on Switch, Circle on PS)"
        },
        {
          "name": "ImGuiKey_GamepadFaceUp",
          "description": "Gamepad Face Up (Y on Xbox, X on Switch, Triangle on PS)"
        },
        {
          "name": "ImGuiKey_GamepadFaceDown",
          "description": "Gamepad Face Down (A on Xbox, B on Switch, Cross on PS)"
        },
        {
          "name": "ImGuiKey_GamepadDpadLeft",
          "description": "Gamepad D-pad Left"
        },
        {
          "name": "ImGuiKey_GamepadDpadRight",
          "description": "Gamepad D-pad Right"
        },
        {
          "name": "ImGuiKey_GamepadDpadUp",
          "description": "Gamepad D-pad Up"
        },
        {
          "name": "ImGuiKey_GamepadDpadDown",
          "description": "Gamepad D-pad Down"
        },
        {
          "name": "ImGuiKey_GamepadL1",
          "description": "Gamepad L1 (L Bumper on Xbox, L on Switch, L1 on PS)"
        },
        {
          "name": "ImGuiKey_GamepadR1",
          "description": "Gamepad R1 (R Bumper on Xbox, R on Switch, R1 on PS)"
        },
        {
          "name": "ImGuiKey_GamepadL2",
          "description": "Gamepad L2 (L Trigger on Xbox, ZL on Switch, L2 on PS) [Analog]"
        },
        {
          "name": "ImGuiKey_GamepadR2",
          "description": "Gamepad R2 (R Trigger on Xbox, ZR on Switch, R2 on PS) [Analog]"
        },
        {
          "name": "ImGuiKey_GamepadL3",
          "description": "Gamepad L3 (L Stick on Xbox, L3 on Switch, L3 on PS)"
        },
        {
          "name": "ImGuiKey_GamepadR3",
          "description": "Gamepad R3 (R Stick on Xbox, R3 on Switch, R3 on PS)"
        },
        {
          "name": "ImGuiKey_GamepadLStickLeft",
          "description": "[Analog] Gamepad L Stick Left"
        },
        {
          "name": "ImGuiKey_GamepadLStickRight",
          "description": "[Analog] Gamepad L Stick Right"
        },
        {
          "name": "ImGuiKey_GamepadLStickUp",
          "description": "[Analog] Gamepad L Stick Up"
        },
        {
          "name": "ImGuiKey_GamepadLStickDown",
          "description": "[Analog] Gamepad L Stick Down"
        },
        {
          "name": "ImGuiKey_GamepadRStickLeft",
          "description": "[Analog] Gamepad R Stick Left"
        },
        {
          "name": "ImGuiKey_GamepadRStickRight",
          "description": "[Analog] Gamepad R Stick Right"
        },
        {
          "name": "ImGuiKey_GamepadRStickUp",
          "description": "[Analog] Gamepad R Stick Up"
        },
        {
          "name": "ImGuiKey_GamepadRStickDown",
          "description": "[Analog] Gamepad R Stick Down"
        },
        {
          "name": "ImGuiKey_MouseLeft",
          "description": "Mouse Left Button"
        },
        {
          "name": "ImGuiKey_MouseRight",
          "description": "Mouse Right Button"
        },
        {
          "name": "ImGuiKey_MouseMiddle",
          "description": "Mouse Middle Button"
        },
        {
          "name": "ImGuiKey_MouseX1",
          "description": "Mouse X1 Button"
        },
        {
          "name": "ImGuiKey_MouseX2",
          "description": "Mouse X2 Button"
        },
        {
          "name": "ImGuiKey_MouseWheelX",
          "description": "Mouse Wheel X Axis"
        },
        {
          "name": "ImGuiKey_MouseWheelY",
          "description": "Mouse Wheel Y Axis"
        },
        {
          "name": "ImGuiKey_ReservedForModCtrl",
          "description": "Reserved for Modifier Control"
        },
        {
          "name": "ImGuiKey_ReservedForModShift",
          "description": "Reserved for Modifier Shift"
        },
        {
          "name": "ImGuiKey_ReservedForModAlt",
          "description": "Reserved for Modifier Alt"
        },
        {
          "name": "ImGuiKey_ReservedForModSuper",
          "description": "Reserved for Modifier Super"
        },
        {
          "name": "ImGuiKey_COUNT",
          "description": "Total Count of Keys"
        },
        {
          "name": "ImGuiMod_None",
          "description": "No Modifier"
        },
        {
          "name": "ImGuiMod_Ctrl",
          "description": "Control Modifier"
        },
        {
          "name": "ImGuiMod_Shift",
          "description": "Shift Modifier"
        },
        {
          "name": "ImGuiMod_Alt",
          "description": "Alt Modifier"
        },
        {
          "name": "ImGuiMod_Super",
          "description": "Super (Windows/Command) Modifier"
        },
        {
          "name": "ImGuiMod_Mask_",
          "description": "Modifier Mask (4-bits)"
        },
        {
          "name": "ImGuiKey_NamedKey_BEGIN",
          "description": "Named Key Start (512)"
        },
        {
          "name": "ImGuiKey_NamedKey_END",
          "description": "Named Key End"
        },
        {
          "name": "ImGuiKey_NamedKey_COUNT",
          "description": "Count of Named Keys"
        },
        {
          "name": "ImGuiKey_KeysData_SIZE",
          "description": "Size of KeysData"
        },
        {
          "name": "ImGuiKey_KeysData_OFFSET",
          "description": "Offset of KeysData"
        }
      ]
    },
    {
      "name": "ImGuiInputFlags_",
      "values": [
        {
          "name": "ImGuiInputFlags_None",
          "value": 0,
          "description": "No input flags."
        },
        {
          "name": "ImGuiInputFlags_Repeat",
          "value": 1,
          "description": "Enable repeat. Return true on successive repeats. Default for legacy IsKeyPressed(). NOT default for legacy IsMouseClicked(). MUST BE == 1."
        },
        {
          "name": "ImGuiInputFlags_RouteActive",
          "value": 1024,
          "description": "Route to active item only."
        },
        {
          "name": "ImGuiInputFlags_RouteFocused",
          "value": 2048,
          "description": "Route to windows in the focus stack (DEFAULT). Deep-most focused window takes inputs. Active item takes inputs over deep-most focused window."
        },
        {
          "name": "ImGuiInputFlags_RouteGlobal",
          "value": 4096,
          "description": "Global route (unless a focused window or active item registered the route)."
        },
        {
          "name": "ImGuiInputFlags_RouteAlways",
          "value": 8192,
          "description": "Do not register route, poll keys directly."
        },
        {
          "name": "ImGuiInputFlags_RouteOverFocused",
          "value": 16384,
          "description": "Option: global route: higher priority than focused route (unless active item in focused route)."
        },
        {
          "name": "ImGuiInputFlags_RouteOverActive",
          "value": 32768,
          "description": "Option: global route: higher priority than active item. Unlikely you need to use that: will interfere with every active items, e.g., CTRL+A registered by InputText will be overridden by this. May not be fully honored as user/internal code is likely to always assume they can access keys when active."
        },
        {
          "name": "ImGuiInputFlags_RouteUnlessBgFocused",
          "value": 65536,
          "description": "Option: global route: will not be applied if underlying background/void is focused (i.e., no Dear ImGui windows are focused). Useful for overlay applications."
        },
        {
          "name": "ImGuiInputFlags_RouteFromRootWindow",
          "value": 131072,
          "description": "Option: route evaluated from the point of view of root window rather than current window."
        },
        {
          "name": "ImGuiInputFlags_Tooltip",
          "value": 262144,
          "description": "Automatically display a tooltip when hovering item [BETA] Unsure of right API (opt-in/opt-out)."
        }
      ]
    },
    {
      "name": "ImGuiConfigFlags_",
      "values": [
        {
          "name": "ImGuiConfigFlags_None",
          "value": 0,
          "description": "No configuration flags."
        },
        {
          "name": "ImGuiConfigFlags_NavEnableKeyboard",
          "value": 1,
          "description": "Master keyboard navigation enable flag. Enables full Tabbing + directional arrows + space/enter to activate."
        },
        {
          "name": "ImGuiConfigFlags_NavEnableGamepad",
          "value": 2,
          "description": "Master gamepad navigation enable flag. Backend also needs to set ImGuiBackendFlags_HasGamepad."
        },
        {
          "name": "ImGuiConfigFlags_NavEnableSetMousePos",
          "value": 4,
          "description": "Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward."
        },
        {
          "name": "ImGuiConfigFlags_NavNoCaptureKeyboard",
          "value": 8,
          "description": "Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set."
        },
        {
          "name": "ImGuiConfigFlags_NoMouse",
          "value": 16,
          "description": "Instruct dear imgui to disable mouse inputs and interactions."
        },
        {
          "name": "ImGuiConfigFlags_NoMouseCursorChange",
          "value": 32,
          "description": "Instruct backend to not alter mouse cursor shape and visibility."
        },
        {
          "name": "ImGuiConfigFlags_NoKeyboard",
          "value": 64,
          "description": "Instruct dear imgui to disable keyboard inputs and interactions."
        },
        {
          "name": "ImGuiConfigFlags_IsSRGB",
          "value": 1048576,
          "description": "Application is SRGB-aware."
        },
        {
          "name": "ImGuiConfigFlags_IsTouchScreen",
          "value": 2097152,
          "description": "Application is using a touch screen instead of a mouse."
        }
      ]
    },
    {
      "name": "ImGuiBackendFlags_",
      "values": [
        {
          "name": "ImGuiBackendFlags_None",
          "value": 0,
          "description": "No backend flags."
        },
        {
          "name": "ImGuiBackendFlags_HasGamepad",
          "value": 1,
          "description": "Backend Platform supports gamepad and currently has one connected."
        },
        {
          "name": "ImGuiBackendFlags_HasMouseCursors",
          "value": 2,
          "description": "Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape."
        },
        {
          "name": "ImGuiBackendFlags_HasSetMousePos",
          "value": 4,
          "description": "Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position."
        },
        {
          "name": "ImGuiBackendFlags_RendererHasVtxOffset",
          "value": 8,
          "description": "Backend Renderer supports ImDrawCmd::VtxOffset, enabling output of large meshes (64K+ vertices) while still using 16-bit indices."
        }
      ]
    },
    {
      "name": "ImGuiCol_",
      "values": [
        {
          "name": "ImGuiCol_Text",
          "value": 0,
          "description": ""
        },
        {
          "name": "ImGuiCol_TextDisabled",
          "value": 1,
          "description": ""
        },
        {
          "name": "ImGuiCol_WindowBg",
          "value": 2,
          "description": "Background of normal windows"
        },
        {
          "name": "ImGuiCol_ChildBg",
          "value": 3,
          "description": "Background of child windows"
        },
        {
          "name": "ImGuiCol_PopupBg",
          "value": 4,
          "description": "Background of popups, menus, tooltips windows"
        },
        {
          "name": "ImGuiCol_Border",
          "value": 5,
          "description": ""
        },
        {
          "name": "ImGuiCol_BorderShadow",
          "value": 6,
          "description": ""
        },
        {
          "name": "ImGuiCol_FrameBg",
          "value": 7,
          "description": "Background of checkbox, radio button, plot, slider, text input"
        },
        {
          "name": "ImGuiCol_FrameBgHovered",
          "value": 8,
          "description": ""
        },
        {
          "name": "ImGuiCol_FrameBgActive",
          "value": 9,
          "description": ""
        },
        {
          "name": "ImGuiCol_TitleBg",
          "value": 10,
          "description": "Title bar"
        },
        {
          "name": "ImGuiCol_TitleBgActive",
          "value": 11,
          "description": "Title bar when focused"
        },
        {
          "name": "ImGuiCol_TitleBgCollapsed",
          "value": 12,
          "description": "Title bar when collapsed"
        },
        {
          "name": "ImGuiCol_MenuBarBg",
          "value": 13,
          "description": ""
        },
        {
          "name": "ImGuiCol_ScrollbarBg",
          "value": 14,
          "description": ""
        },
        {
          "name": "ImGuiCol_ScrollbarGrab",
          "value": 15,
          "description": ""
        },
        {
          "name": "ImGuiCol_ScrollbarGrabHovered",
          "value": 16,
          "description": ""
        },
        {
          "name": "ImGuiCol_ScrollbarGrabActive",
          "value": 17,
          "description": ""
        },
        {
          "name": "ImGuiCol_CheckMark",
          "value": 18,
          "description": "Checkbox tick and RadioButton circle"
        },
        {
          "name": "ImGuiCol_SliderGrab",
          "value": 19,
          "description": ""
        },
        {
          "name": "ImGuiCol_SliderGrabActive",
          "value": 20,
          "description": ""
        },
        {
          "name": "ImGuiCol_Button",
          "value": 21,
          "description": ""
        },
        {
          "name": "ImGuiCol_ButtonHovered",
          "value": 22,
          "description": ""
        },
        {
          "name": "ImGuiCol_ButtonActive",
          "value": 23,
          "description": ""
        },
        {
          "name": "ImGuiCol_Header",
          "value": 24,
          "description": "Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem"
        },
        {
          "name": "ImGuiCol_HeaderHovered",
          "value": 25,
          "description": ""
        },
        {
          "name": "ImGuiCol_HeaderActive",
          "value": 26,
          "description": ""
        },
        {
          "name": "ImGuiCol_Separator",
          "value": 27,
          "description": ""
        },
        {
          "name": "ImGuiCol_SeparatorHovered",
          "value": 28,
          "description": ""
        },
        {
          "name": "ImGuiCol_SeparatorActive",
          "value": 29,
          "description": ""
        },
        {
          "name": "ImGuiCol_ResizeGrip",
          "value": 30,
          "description": "Resize grip in lower-right and lower-left corners of windows."
        },
        {
          "name": "ImGuiCol_ResizeGripHovered",
          "value": 31,
          "description": ""
        },
        {
          "name": "ImGuiCol_ResizeGripActive",
          "value": 32,
          "description": ""
        },
        {
          "name": "ImGuiCol_TabHovered",
          "value": 33,
          "description": "Tab background, when hovered"
        },
        {
          "name": "ImGuiCol_Tab",
          "value": 34,
          "description": "Tab background, when tab-bar is focused & tab is unselected"
        },
        {
          "name": "ImGuiCol_TabSelected",
          "value": 35,
          "description": "Tab background, when tab-bar is focused & tab is selected"
        },
        {
          "name": "ImGuiCol_TabSelectedOverline",
          "value": 36,
          "description": "Tab horizontal overline, when tab-bar is focused & tab is selected"
        },
        {
          "name": "ImGuiCol_TabDimmed",
          "value": 37,
          "description": "Tab background, when tab-bar is unfocused & tab is unselected"
        },
        {
          "name": "ImGuiCol_TabDimmedSelected",
          "value": 38,
          "description": "Tab background, when tab-bar is unfocused & tab is selected"
        },
        {
          "name": "ImGuiCol_TabDimmedSelectedOverline",
          "value": 39,
          "description": "..horizontal overline, when tab-bar is unfocused & tab is selected"
        },
        {
          "name": "ImGuiCol_PlotLines",
          "value": 40,
          "description": ""
        },
        {
          "name": "ImGuiCol_PlotLinesHovered",
          "value": 41,
          "description": ""
        },
        {
          "name": "ImGuiCol_PlotHistogram",
          "value": 42,
          "description": ""
        },
        {
          "name": "ImGuiCol_PlotHistogramHovered",
          "value": 43,
          "description": ""
        },
        {
          "name": "ImGuiCol_TableHeaderBg",
          "value": 44,
          "description": "Table header background"
        },
        {
          "name": "ImGuiCol_TableBorderStrong",
          "value": 45,
          "description": "Table outer and header borders (prefer using Alpha=1.0 here)"
        },
        {
          "name": "ImGuiCol_TableBorderLight",
          "value": 46,
          "description": "Table inner borders (prefer using Alpha=1.0 here)"
        },
        {
          "name": "ImGuiCol_TableRowBg",
          "value": 47,
          "description": "Table row background (even rows)"
        },
        {
          "name": "ImGuiCol_TableRowBgAlt",
          "value": 48,
          "description": "Table row background (odd rows)"
        },
        {
          "name": "ImGuiCol_TextLink",
          "value": 49,
          "description": "Hyperlink color"
        },
        {
          "name": "ImGuiCol_TextSelectedBg",
          "value": 50,
          "description": ""
        },
        {
          "name": "ImGuiCol_DragDropTarget",
          "value": 51,
          "description": "Rectangle highlighting a drop target"
        },
        {
          "name": "ImGuiCol_NavHighlight",
          "value": 52,
          "description": "Gamepad/keyboard: current highlighted item"
        },
        {
          "name": "ImGuiCol_NavWindowingHighlight",
          "value": 53,
          "description": "Highlight window when using CTRL+TAB"
        },
        {
          "name": "ImGuiCol_NavWindowingDimBg",
          "value": 54,
          "description": "Darken/colorize entire screen behind the CTRL+TAB window list, when active"
        },
        {
          "name": "ImGuiCol_ModalWindowDimBg",
          "value": 55,
          "description": "Darken/colorize entire screen behind a modal window, when one is active"
        }
      ]
    },
    {
      "name": "ImGuiStyleVar_",
      "values": [
        {
          "name": "ImGuiStyleVar_Alpha",
          "value": 0,
          "description": "Alpha"
        },
        {
          "name": "ImGuiStyleVar_DisabledAlpha",
          "value": 1,
          "description": "DisabledAlpha"
        },
        {
          "name": "ImGuiStyleVar_WindowPadding",
          "value": 2,
          "description": "WindowPadding"
        },
        {
          "name": "ImGuiStyleVar_WindowRounding",
          "value": 3,
          "description": "WindowRounding"
        },
        {
          "name": "ImGuiStyleVar_WindowBorderSize",
          "value": 4,
          "description": "WindowBorderSize"
        },
        {
          "name": "ImGuiStyleVar_WindowMinSize",
          "value": 5,
          "description": "WindowMinSize"
        },
        {
          "name": "ImGuiStyleVar_WindowTitleAlign",
          "value": 6,
          "description": "WindowTitleAlign"
        },
        {
          "name": "ImGuiStyleVar_ChildRounding",
          "value": 7,
          "description": "ChildRounding"
        },
        {
          "name": "ImGuiStyleVar_ChildBorderSize",
          "value": 8,
          "description": "ChildBorderSize"
        },
        {
          "name": "ImGuiStyleVar_PopupRounding",
          "value": 9,
          "description": "PopupRounding"
        },
        {
          "name": "ImGuiStyleVar_PopupBorderSize",
          "value": 10,
          "description": "PopupBorderSize"
        },
        {
          "name": "ImGuiStyleVar_FramePadding",
          "value": 11,
          "description": "FramePadding"
        },
        {
          "name": "ImGuiStyleVar_FrameRounding",
          "value": 12,
          "description": "FrameRounding"
        },
        {
          "name": "ImGuiStyleVar_FrameBorderSize",
          "value": 13,
          "description": "FrameBorderSize"
        },
        {
          "name": "ImGuiStyleVar_ItemSpacing",
          "value": 14,
          "description": "ItemSpacing"
        },
        {
          "name": "ImGuiStyleVar_ItemInnerSpacing",
          "value": 15,
          "description": "ItemInnerSpacing"
        },
        {
          "name": "ImGuiStyleVar_IndentSpacing",
          "value": 16,
          "description": "IndentSpacing"
        },
        {
          "name": "ImGuiStyleVar_CellPadding",
          "value": 17,
          "description": "CellPadding"
        },
        {
          "name": "ImGuiStyleVar_ScrollbarSize",
          "value": 18,
          "description": "ScrollbarSize"
        },
        {
          "name": "ImGuiStyleVar_ScrollbarRounding",
          "value": 19,
          "description": "ScrollbarRounding"
        },
        {
          "name": "ImGuiStyleVar_GrabMinSize",
          "value": 20,
          "description": "GrabMinSize"
        },
        {
          "name": "ImGuiStyleVar_GrabRounding",
          "value": 21,
          "description": "GrabRounding"
        },
        {
          "name": "ImGuiStyleVar_TabRounding",
          "value": 22,
          "description": "TabRounding"
        },
        {
          "name": "ImGuiStyleVar_TabBorderSize",
          "value": 23,
          "description": "TabBorderSize"
        },
        {
          "name": "ImGuiStyleVar_TabBarBorderSize",
          "value": 24,
          "description": "TabBarBorderSize"
        },
        {
          "name": "ImGuiStyleVar_TabBarOverlineSize",
          "value": 25,
          "description": "TabBarOverlineSize"
        },
        {
          "name": "ImGuiStyleVar_TableAngledHeadersAngle",
          "value": 26,
          "description": "TableAngledHeadersAngle"
        },
        {
          "name": "ImGuiStyleVar_TableAngledHeadersTextAlign",
          "value": 27,
          "description": "TableAngledHeadersTextAlign"
        },
        {
          "name": "ImGuiStyleVar_ButtonTextAlign",
          "value": 28,
          "description": "ButtonTextAlign"
        },
        {
          "name": "ImGuiStyleVar_SelectableTextAlign",
          "value": 29,
          "description": "SelectableTextAlign"
        },
        {
          "name": "ImGuiStyleVar_SeparatorTextBorderSize",
          "value": 30,
          "description": "SeparatorTextBorderSize"
        },
        {
          "name": "ImGuiStyleVar_SeparatorTextAlign",
          "value": 31,
          "description": "SeparatorTextAlign"
        },
        {
          "name": "ImGuiStyleVar_SeparatorTextPadding",
          "value": 32,
          "description": "SeparatorTextPadding"
        }
      ]
    },
    {
      "name": "ImGuiButtonFlags_",
      "values": [
        {
          "name": "ImGuiButtonFlags_None",
          "value": 0,
          "description": ""
        },
        {
          "name": "ImGuiButtonFlags_MouseButtonLeft",
          "value": 1,
          "description": "React on left mouse button (default)"
        },
        {
          "name": "ImGuiButtonFlags_MouseButtonRight",
          "value": 2,
          "description": "React on right mouse button"
        },
        {
          "name": "ImGuiButtonFlags_MouseButtonMiddle",
          "value": 4,
          "description": "React on center mouse button"
        }
      ]
    },
    {
      "name": "ImGuiColorEditFlags_",
      "values": [
        {
          "name": "ImGuiColorEditFlags_None",
          "value": 0,
          "description": ""
        },
        {
          "name": "ImGuiColorEditFlags_NoAlpha",
          "value": 2,
          "description": "ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer)."
        },
        {
          "name": "ImGuiColorEditFlags_NoPicker",
          "value": 4,
          "description": "ColorEdit: disable picker when clicking on color square."
        },
        {
          "name": "ImGuiColorEditFlags_NoOptions",
          "value": 8,
          "description": "ColorEdit: disable toggling options menu when right-clicking on inputs/small preview."
        },
        {
          "name": "ImGuiColorEditFlags_NoSmallPreview",
          "value": 16,
          "description": "ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)"
        },
        {
          "name": "ImGuiColorEditFlags_NoInputs",
          "value": 32,
          "description": "ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square)."
        },
        {
          "name": "ImGuiColorEditFlags_NoTooltip",
          "value": 64,
          "description": "ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview."
        },
        {
          "name": "ImGuiColorEditFlags_NoLabel",
          "value": 128,
          "description": "ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker)."
        },
        {
          "name": "ImGuiColorEditFlags_NoSidePreview",
          "value": 256,
          "description": "ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead."
        },
        {
          "name": "ImGuiColorEditFlags_NoDragDrop",
          "value": 512,
          "description": "ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source."
        },
        {
          "name": "ImGuiColorEditFlags_NoBorder",
          "value": 1024,
          "description": "ColorButton: disable border (which is enforced by default)."
        },
        {
          "name": "ImGuiColorEditFlags_AlphaBar",
          "value": 65536,
          "description": "ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker."
        },
        {
          "name": "ImGuiColorEditFlags_AlphaPreview",
          "value": 131072,
          "description": "ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque."
        },
        {
          "name": "ImGuiColorEditFlags_AlphaPreviewHalf",
          "value": 262144,
          "description": "ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque."
        },
        {
          "name": "ImGuiColorEditFlags_HDR",
          "value": 524288,
          "description": "(WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well)."
        },
        {
          "name": "ImGuiColorEditFlags_DisplayRGB",
          "value": 1048576,
          "description": "ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex."
        },
        {
          "name": "ImGuiColorEditFlags_DisplayHSV",
          "value": 2097152,
          "description": "Display as HSV."
        },
        {
          "name": "ImGuiColorEditFlags_DisplayHex",
          "value": 4194304,
          "description": "Display as Hex."
        },
        {
          "name": "ImGuiColorEditFlags_Uint8",
          "value": 8388608,
          "description": "ColorEdit, ColorPicker, ColorButton: display values formatted as 0..255."
        },
        {
          "name": "ImGuiColorEditFlags_Float",
          "value": 16777216,
          "description": "ColorEdit, ColorPicker, ColorButton: display values formatted as 0.0f..1.0f floats instead of 0..255 integers."
        },
        {
          "name": "ImGuiColorEditFlags_PickerHueBar",
          "value": 33554432,
          "description": "ColorPicker: bar for Hue, rectangle for Sat/Value."
        },
        {
          "name": "ImGuiColorEditFlags_PickerHueWheel",
          "value": 67108864,
          "description": "ColorPicker: wheel for Hue, triangle for Sat/Value."
        },
        {
          "name": "ImGuiColorEditFlags_InputRGB",
          "value": 134217728,
          "description": "ColorEdit, ColorPicker: input and output data in RGB format."
        },
        {
          "name": "ImGuiColorEditFlags_InputHSV",
          "value": 268435456,
          "description": "ColorEdit, ColorPicker: input and output data in HSV format."
        }
      ]
    },
    {
      "name": "ImGuiSliderFlags_",
      "values": [
        {
          "name": "ImGuiSliderFlags_None",
          "value": 0,
          "description": ""
        },
        {
          "name": "ImGuiSliderFlags_AlwaysClamp",
          "value": 16,
          "description": "Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds."
        },
        {
          "name": "ImGuiSliderFlags_Logarithmic",
          "value": 32,
          "description": "Make the widget logarithmic (linear otherwise)."
        },
        {
          "name": "ImGuiSliderFlags_NoRoundToFormat",
          "value": 64,
          "description": "Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)."
        },
        {
          "name": "ImGuiSliderFlags_NoInput",
          "value": 128,
          "description": "Disable CTRL+Click or Enter key allowing to input text directly into the widget."
        },
        {
          "name": "ImGuiSliderFlags_WrapAround",
          "value": 256,
          "description": "Enable wrapping around from max to min and from min to max (only supported by DragXXX() functions for now)."
        }
      ]
    },
    {
      "name": "ImGuiMouseButton_",
      "values": [
        {
          "name": "ImGuiMouseButton_Left",
          "value": 0,
          "description": ""
        },
        {
          "name": "ImGuiMouseButton_Right",
          "value": 1,
          "description": ""
        },
        {
          "name": "ImGuiMouseButton_Middle",
          "value": 2,
          "description": ""
        },
        {
          "name": "ImGuiMouseButton_COUNT",
          "value": 5,
          "description": ""
        }
      ]
    },
    {
      "name": "ImGuiMouseCursor_",
      "values": [
        {
          "name": "ImGuiMouseCursor_None",
          "value": -1,
          "description": ""
        },
        {
          "name": "ImGuiMouseCursor_Arrow",
          "value": 0,
          "description": ""
        },
        {
          "name": "ImGuiMouseCursor_TextInput",
          "value": 1,
          "description": "When hovering over InputText, etc."
        },
        {
          "name": "ImGuiMouseCursor_ResizeAll",
          "value": 2,
          "description": "(Unused by Dear ImGui functions)"
        },
        {
          "name": "ImGuiMouseCursor_ResizeNS",
          "value": 3,
          "description": "When hovering over a horizontal border"
        },
        {
          "name": "ImGuiMouseCursor_ResizeEW",
          "value": 4,
          "description": "When hovering over a vertical border or a column"
        },
        {
          "name": "ImGuiMouseCursor_ResizeNESW",
          "value": 5,
          "description": "When hovering over the bottom-left corner of a window"
        },
        {
          "name": "ImGuiMouseCursor_ResizeNWSE",
          "value": 6,
          "description": "When hovering over the bottom-right corner of a window"
        },
        {
          "name": "ImGuiMouseCursor_Hand",
          "value": 7,
          "description": "(Unused by Dear ImGui functions. Use for e.g. hyperlinks)"
        },
        {
          "name": "ImGuiMouseCursor_NotAllowed",
          "value": 8,
          "description": "When hovering something with disallowed interaction. Usually a crossed circle."
        },
        {
          "name": "ImGuiMouseCursor_COUNT",
          "value": 9,
          "description": ""
        }
      ]
    },
    {
      "name": "ImGuiMouseSource",
      "values": [
        {
          "name": "ImGuiMouseSource_Mouse",
          "value": 0,
          "description": "Input is coming from an actual mouse."
        },
        {
          "name": "ImGuiMouseSource_TouchScreen",
          "value": 1,
          "description": "Input is coming from a touch screen (no hovering prior to initial press, less precise initial press aiming, dual-axis wheeling possible)."
        },
        {
          "name": "ImGuiMouseSource_Pen",
          "value": 2,
          "description": "Input is coming from a pressure/magnetic pen (often used in conjunction with high-sampling rates)."
        },
        {
          "name": "ImGuiMouseSource_COUNT",
          "value": 3,
          "description": ""
        }
      ]
    },
    {
      "name": "ImGuiCond_",
      "values": [
        {
          "name": "ImGuiCond_None",
          "value": 0,
          "description": "No condition (always set the variable), same as _Always"
        },
        {
          "name": "ImGuiCond_Always",
          "value": 1,
          "description": "No condition (always set the variable), same as _None"
        },
        {
          "name": "ImGuiCond_Once",
          "value": 2,
          "description": "Set the variable once per runtime session (only the first call will succeed)"
        },
        {
          "name": "ImGuiCond_FirstUseEver",
          "value": 4,
          "description": "Set the variable if the object/window has no persistently saved data (no entry in .ini file)"
        },
        {
          "name": "ImGuiCond_Appearing",
          "value": 8,
          "description": "Set the variable if the object/window is appearing after being hidden/inactive (or the first time)"
        }
      ]
    },
    {
      "name": "ImGuiTableFlags_",
      "values": [
        {
          "name": "ImGuiTableFlags_None",
          "value": 0,
          "description": "No flags."
        },
        {
          "name": "ImGuiTableFlags_Resizable",
          "value": 1,
          "description": "Enable resizing columns."
        },
        {
          "name": "ImGuiTableFlags_Reorderable",
          "value": 2,
          "description": "Enable reordering columns in header row."
        },
        {
          "name": "ImGuiTableFlags_Hideable",
          "value": 4,
          "description": "Enable hiding/disabling columns in context menu."
        },
        {
          "name": "ImGuiTableFlags_Sortable",
          "value": 8,
          "description": "Enable sorting."
        },
        {
          "name": "ImGuiTableFlags_NoSavedSettings",
          "value": 16,
          "description": "Disable persisting columns order, width and sort settings in the .ini file."
        },
        {
          "name": "ImGuiTableFlags_ContextMenuInBody",
          "value": 32,
          "description": "Right-click on columns body/contents will display table context menu."
        },
        {
          "name": "ImGuiTableFlags_RowBg",
          "value": 64,
          "description": "Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt."
        },
        {
          "name": "ImGuiTableFlags_BordersInnerH",
          "value": 128,
          "description": "Draw horizontal borders between rows."
        },
        {
          "name": "ImGuiTableFlags_BordersOuterH",
          "value": 256,
          "description": "Draw horizontal borders at the top and bottom."
        },
        {
          "name": "ImGuiTableFlags_BordersInnerV",
          "value": 512,
          "description": "Draw vertical borders between columns."
        },
        {
          "name": "ImGuiTableFlags_BordersOuterV",
          "value": 1024,
          "description": "Draw vertical borders on the left and right sides."
        },
        {
          "name": "ImGuiTableFlags_BordersH",
          "value": 1280,
          "description": "Draw horizontal borders."
        },
        {
          "name": "ImGuiTableFlags_BordersV",
          "value": 1536,
          "description": "Draw vertical borders."
        },
        {
          "name": "ImGuiTableFlags_BordersInner",
          "value": 640,
          "description": "Draw inner borders."
        },
        {
          "name": "ImGuiTableFlags_BordersOuter",
          "value": 1280,
          "description": "Draw outer borders."
        },
        {
          "name": "ImGuiTableFlags_Borders",
          "value": 1920,
          "description": "Draw all borders."
        },
        {
          "name": "ImGuiTableFlags_NoBordersInBody",
          "value": 2048,
          "description": "[ALPHA] Disable vertical borders in columns Body."
        },
        {
          "name": "ImGuiTableFlags_NoBordersInBodyUntilResize",
          "value": 4096,
          "description": "[ALPHA] Disable vertical borders in columns Body until hovered for resize."
        },
        {
          "name": "ImGuiTableFlags_SizingFixedFit",
          "value": 8192,
          "description": "Columns default to _WidthFixed or _WidthAuto, matching contents width."
        },
        {
          "name": "ImGuiTableFlags_SizingFixedSame",
          "value": 16384,
          "description": "Columns default to _WidthFixed or _WidthAuto, matching the maximum contents width of all columns."
        },
        {
          "name": "ImGuiTableFlags_SizingStretchProp",
          "value": 24576,
          "description": "Columns default to _WidthStretch with default weights proportional to each columns contents widths."
        },
        {
          "name": "ImGuiTableFlags_SizingStretchSame",
          "value": 32768,
          "description": "Columns default to _WidthStretch with default weights all equal."
        },
        {
          "name": "ImGuiTableFlags_NoHostExtendX",
          "value": 65536,
          "description": "Make outer width auto-fit to columns, overriding outer_size.x value."
        },
        {
          "name": "ImGuiTableFlags_NoHostExtendY",
          "value": 131072,
          "description": "Make outer height stop exactly at outer_size.y."
        },
        {
          "name": "ImGuiTableFlags_NoKeepColumnsVisible",
          "value": 262144,
          "description": "Disable keeping column always minimally visible when ScrollX is off."
        },
        {
          "name": "ImGuiTableFlags_PreciseWidths",
          "value": 524288,
          "description": "Disable distributing remainder width to stretched columns."
        },
        {
          "name": "ImGuiTableFlags_NoClip",
          "value": 1048576,
          "description": "Disable clipping rectangle for every individual columns."
        },
        {
          "name": "ImGuiTableFlags_PadOuterX",
          "value": 2097152,
          "description": "Default if BordersOuterV is on. Enable outermost padding."
        },
        {
          "name": "ImGuiTableFlags_NoPadOuterX",
          "value": 4194304,
          "description": "Default if BordersOuterV is off. Disable outermost padding."
        },
        {
          "name": "ImGuiTableFlags_NoPadInnerX",
          "value": 8388608,
          "description": "Disable inner padding between columns."
        },
        {
          "name": "ImGuiTableFlags_ScrollX",
          "value": 16777216,
          "description": "Enable horizontal scrolling."
        },
        {
          "name": "ImGuiTableFlags_ScrollY",
          "value": 33554432,
          "description": "Enable vertical scrolling."
        },
        {
          "name": "ImGuiTableFlags_SortMulti",
          "value": 67108864,
          "description": "Hold shift when clicking headers to sort on multiple columns."
        },
        {
          "name": "ImGuiTableFlags_SortTristate",
          "value": 134217728,
          "description": "Allow no sorting, disable default sorting."
        },
        {
          "name": "ImGuiTableFlags_HighlightHoveredColumn",
          "value": 268435456,
          "description": "Highlight column headers when hovered."
        },
        {
          "name": "ImGuiTableFlags_SizingMask_",
          "value": 61440,
          "description": "[Internal] Sizing mask for columns."
        }
      ]
    },
    {
      "name": "ImGuiTableColumnFlags_",
      "values": [
        {
          "name": "ImGuiTableColumnFlags_None",
          "value": 0,
          "description": "No flags."
        },
        {
          "name": "ImGuiTableColumnFlags_Disabled",
          "value": 1,
          "description": "Hide column, won't show in context menu."
        },
        {
          "name": "ImGuiTableColumnFlags_DefaultHide",
          "value": 2,
          "description": "Default as a hidden/disabled column."
        },
        {
          "name": "ImGuiTableColumnFlags_DefaultSort",
          "value": 4,
          "description": "Default as a sorting column."
        },
        {
          "name": "ImGuiTableColumnFlags_WidthStretch",
          "value": 8,
          "description": "Column will stretch."
        },
        {
          "name": "ImGuiTableColumnFlags_WidthFixed",
          "value": 16,
          "description": "Column will not stretch."
        },
        {
          "name": "ImGuiTableColumnFlags_NoResize",
          "value": 32,
          "description": "Disable manual resizing."
        },
        {
          "name": "ImGuiTableColumnFlags_NoReorder",
          "value": 64,
          "description": "Disable manual reordering of this column."
        },
        {
          "name": "ImGuiTableColumnFlags_NoHide",
          "value": 128,
          "description": "Disable ability to hide/disable this column."
        },
        {
          "name": "ImGuiTableColumnFlags_NoClip",
          "value": 256,
          "description": "Disable clipping for this column."
        },
        {
          "name": "ImGuiTableColumnFlags_NoSort",
          "value": 512,
          "description": "Disable ability to sort on this field."
        },
        {
          "name": "ImGuiTableColumnFlags_NoSortAscending",
          "value": 1024,
          "description": "Disable ability to sort in the ascending direction."
        },
        {
          "name": "ImGuiTableColumnFlags_NoSortDescending",
          "value": 2048,
          "description": "Disable ability to sort in the descending direction."
        },
        {
          "name": "ImGuiTableColumnFlags_NoHeaderLabel",
          "value": 4096,
          "description": "TableHeadersRow() will not submit horizontal label for this column."
        },
        {
          "name": "ImGuiTableColumnFlags_NoHeaderWidth",
          "value": 8192,
          "description": "Disable header text width contribution to automatic column width."
        },
        {
          "name": "ImGuiTableColumnFlags_PreferSortAscending",
          "value": 16384,
          "description": "Make the initial sort direction Ascending when first sorting on this column."
        },
        {
          "name": "ImGuiTableColumnFlags_PreferSortDescending",
          "value": 32768,
          "description": "Make the initial sort direction Descending when first sorting on this column."
        },
        {
          "name": "ImGuiTableColumnFlags_IndentEnable",
          "value": 65536,
          "description": "Use current Indent value when entering cell."
        },
        {
          "name": "ImGuiTableColumnFlags_IndentDisable",
          "value": 131072,
          "description": "Ignore current Indent value when entering cell."
        },
        {
          "name": "ImGuiTableColumnFlags_AngledHeader",
          "value": 262144,
          "description": "TableHeadersRow() will submit an angled header row for this column."
        },
        {
          "name": "ImGuiTableColumnFlags_IsEnabled",
          "value": 16777216,
          "description": "Status: is enabled (not hidden by user/api)."
        },
        {
          "name": "ImGuiTableColumnFlags_IsVisible",
          "value": 33554432,
          "description": "Status: is visible (enabled and not clipped by scrolling)."
        },
        {
          "name": "ImGuiTableColumnFlags_IsSorted",
          "value": 67108864,
          "description": "Status: is currently part of the sort specs."
        },
        {
          "name": "ImGuiTableColumnFlags_IsHovered",
          "value": 134217728,
          "description": "Status: is hovered by mouse."
        },
        {
          "name": "ImGuiTableColumnFlags_WidthMask_",
          "value": 24,
          "description": "[Internal] Width mask for columns."
        },
        {
          "name": "ImGuiTableColumnFlags_IndentMask_",
          "value": 196608,
          "description": "[Internal] Indent mask for columns."
        },
        {
          "name": "ImGuiTableColumnFlags_StatusMask_",
          "value": 251658240,
          "description": "[Internal] Status mask for columns."
        },
        {
          "name": "ImGuiTableColumnFlags_NoDirectResize_",
          "value": 1073741824,
          "description": "[Internal] Disable user resizing this column directly."
        }
      ]
    },
    {
      "name": "ImGuiTableRowFlags_",
      "values": [
        {
          "name": "ImGuiTableRowFlags_None",
          "value": 0,
          "description": "No flags."
        },
        {
          "name": "ImGuiTableRowFlags_Headers",
          "value": 1,
          "description": "Identify header row (set default background color + width of its contents accounted differently for auto column width)."
        }
      ]
    },
    {
      "name": "ImGuiTableBgTarget_",
      "values": [
        {
          "name": "ImGuiTableBgTarget_None",
          "value": 0,
          "description": "No background color target."
        },
        {
          "name": "ImGuiTableBgTarget_RowBg0",
          "value": 1,
          "description": "Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)."
        },
        {
          "name": "ImGuiTableBgTarget_RowBg1",
          "value": 2,
          "description": "Set row background color 1 (generally used for selection marking)."
        },
        {
          "name": "ImGuiTableBgTarget_CellBg",
          "value": 3,
          "description": "Set cell background color (top-most color)."
        }
      ]
    }
  ]
}
